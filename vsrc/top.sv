// Generated by CIRCT firtool-1.66.0
// Standard header to adapt well known macros for prints and assertions.

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// external module Icache_state_catch

// VCS coverage exclude_file
module meta_2x44(
  input         R0_addr,
                R0_en,
                R0_clk,
  output [43:0] R0_data,
  input         W0_addr,
                W0_en,
                W0_clk,
  input  [43:0] W0_data,
  input  [1:0]  W0_mask
);

  reg [43:0] Memory[0:1];
  always @(posedge W0_clk) begin
    if (W0_en & W0_mask[0])
      Memory[W0_addr][32'h0 +: 22] <= W0_data[21:0];
    if (W0_en & W0_mask[1])
      Memory[W0_addr][32'h16 +: 22] <= W0_data[43:22];
  end // always @(posedge)
  assign R0_data = R0_en ? Memory[R0_addr] : 44'bx;
endmodule

// VCS coverage exclude_file
module data_2x256(
  input          R0_addr,
                 R0_en,
                 R0_clk,
  output [255:0] R0_data,
  input          W0_addr,
                 W0_en,
                 W0_clk,
  input  [255:0] W0_data,
  input  [1:0]   W0_mask
);

  reg [255:0] Memory[0:1];
  always @(posedge W0_clk) begin
    if (W0_en & W0_mask[0])
      Memory[W0_addr][32'h0 +: 128] <= W0_data[127:0];
    if (W0_en & W0_mask[1])
      Memory[W0_addr][32'h80 +: 128] <= W0_data[255:128];
  end // always @(posedge)
  assign R0_data = R0_en ? Memory[R0_addr] : 256'bx;
endmodule

module Icache(
  input          clock,
                 reset,
                 io_addr_valid,
  input  [31:0]  io_addr_bits,
  output [127:0] io_data,
  output         io_cache_hit,
  input          io_replace_data_valid,
  input  [127:0] io_replace_data_bits,
  input  [31:0]  io_replace_addr,
  input          io_flush
);

  wire [21:0]  replace_tag;
  wire [255:0] _data_ext_R0_data;
  wire [43:0]  _meta_ext_R0_data;
  reg  [1:0]   valid_array_0;
  reg  [1:0]   valid_array_1;
  wire [1:0]   _GEN = io_addr_bits[4] ? valid_array_1 : valid_array_0;
  wire         match_way = _meta_ext_R0_data[43:22] == io_addr_bits[26:5] & _GEN[1];
  wire         tag_match =
    _meta_ext_R0_data[21:0] == io_addr_bits[26:5] & _GEN[0] | match_way;
  reg          state_vec_0;
  reg          state_vec_1;
  wire         _state_vec_moreRecentVec_moreRecentVec_0_T_2 =
    io_replace_addr[4] ? state_vec_1 : state_vec_0;
  wire [1:0]   _GEN_0 = {1'h0, ~_state_vec_moreRecentVec_moreRecentVec_0_T_2};
  wire [1:0]   replace_way_mask = 2'h1 << _GEN_0;
  assign replace_tag = io_replace_addr[26:5];
  reg          REG;
  wire         state_vec_nextState_1_0 =
    match_way & (_state_vec_moreRecentVec_moreRecentVec_0_T_2 | match_way);
  wire [1:0]   _valid_array_T_5 =
    (io_replace_addr[4] ? valid_array_1 : valid_array_0) | 2'h1 << _GEN_0;
  always @(posedge clock) begin
    if (reset) begin
      valid_array_0 <= 2'h0;
      valid_array_1 <= 2'h0;
      state_vec_0 <= 1'h0;
      state_vec_1 <= 1'h0;
    end
    else begin
      if (io_replace_data_valid & ~(io_replace_addr[4]))
        valid_array_0 <= _valid_array_T_5;
      else if (io_flush)
        valid_array_0 <= 2'h0;
      if (io_replace_data_valid & io_replace_addr[4])
        valid_array_1 <= _valid_array_T_5;
      else if (io_flush)
        valid_array_1 <= 2'h0;
      if (io_replace_data_valid) begin
        if (io_replace_addr[4])
          state_vec_1 <= ~_state_vec_moreRecentVec_moreRecentVec_0_T_2;
        else
          state_vec_0 <= ~_state_vec_moreRecentVec_moreRecentVec_0_T_2;
      end
      else begin
        if (REG & ~(io_replace_addr[4]))
          state_vec_0 <= state_vec_nextState_1_0;
        if (REG & io_replace_addr[4])
          state_vec_1 <= state_vec_nextState_1_0;
      end
    end
    REG <= tag_match & io_addr_valid;
  end // always @(posedge)
  meta_2x44 meta_ext (
    .R0_addr (io_addr_bits[4]),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .R0_data (_meta_ext_R0_data),
    .W0_addr (io_replace_addr[4]),
    .W0_en   (io_replace_data_valid),
    .W0_clk  (clock),
    .W0_data ({2{replace_tag}}),
    .W0_mask (replace_way_mask)
  );
  data_2x256 data_ext (
    .R0_addr (io_addr_bits[4]),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .R0_data (_data_ext_R0_data),
    .W0_addr (io_replace_addr[4]),
    .W0_en   (io_replace_data_valid),
    .W0_clk  (clock),
    .W0_data ({2{io_replace_data_bits}}),
    .W0_mask (replace_way_mask)
  );
  Icache_state_catch Icache_state (
    .valid       (io_replace_data_valid),
    .write_index ({31'h0, io_replace_addr[4]}),
    .write_way   ({31'h0, ~_state_vec_moreRecentVec_moreRecentVec_0_T_2}),
    .write_tag   ({10'h0, replace_tag}),
    .write_data  (io_replace_data_bits),
    .flush       (1'h0)
  );
  assign io_data = match_way ? _data_ext_R0_data[255:128] : _data_ext_R0_data[127:0];
  assign io_cache_hit = tag_match;
endmodule

// external module IFU_catch

// external module Icache_catch

// external module Icache_MAT_catch

module IFU(
  input         clock,
                reset,
                auto_master_out_arready,
  output        auto_master_out_arvalid,
  output [31:0] auto_master_out_araddr,
  output [7:0]  auto_master_out_arlen,
  output        auto_master_out_rready,
  input         auto_master_out_rvalid,
  input  [31:0] auto_master_out_rdata,
                io_WBU_2_IFU_Next_PC,
  input         io_IFU_2_IDU_ready,
  output        io_IFU_2_IDU_valid,
  output [31:0] io_IFU_2_IDU_bits_data,
                io_IFU_2_IDU_bits_PC,
  input         io_Pipeline_ctrl_flush
);

  wire         masterNodeOut_rready;
  wire         io_IFU_2_IDU_valid_0;
  wire [127:0] _Icache_io_data;
  wire         _Icache_io_cache_hit;
  reg  [2:0]   state;
  wire         _cache_Catch_io_Icache_T = state == 3'h1;
  reg          flush_REG;
  reg  [31:0]  pc;
  reg  [31:0]  dnpc;
  wire         Icache_io_addr_valid = io_IFU_2_IDU_ready & io_IFU_2_IDU_valid_0;
  wire         _state_T_2 = pc[31:27] != 5'h10;
  reg  [31:0]  Multi_transfer_0;
  reg  [31:0]  Multi_transfer_1;
  reg  [31:0]  Multi_transfer_2;
  reg  [31:0]  Multi_transfer_3;
  reg  [1:0]   Multi_transfer_counter;
  reg  [31:0]  transfer;
  wire         _state_T_15 = masterNodeOut_rready & auto_master_out_rvalid;
  assign io_IFU_2_IDU_valid_0 =
    (state == 3'h4 | state == 3'h1 & _Icache_io_cache_hit) & ~flush_REG;
  wire         _masterNodeOut_arlen_T = state == 3'h5;
  wire         _masterNodeOut_araddr_T = state == 3'h2;
  wire         masterNodeOut_arvalid =
    _masterNodeOut_arlen_T | _masterNodeOut_araddr_T;
  assign masterNodeOut_rready = state == 3'h6 | state == 3'h3;
  reg  [31:0]  casez_tmp;
  always_comb begin
    casez (pc[3:2])
      2'b00:
        casez_tmp = _Icache_io_data[31:0];
      2'b01:
        casez_tmp = _Icache_io_data[63:32];
      2'b10:
        casez_tmp = _Icache_io_data[95:64];
      default:
        casez_tmp = _Icache_io_data[127:96];
    endcase
  end // always_comb
  wire [31:0]  inst = _cache_Catch_io_Icache_T ? casez_tmp : transfer;
  reg  [2:0]   casez_tmp_0;
  wire         _state_T_13 = auto_master_out_arready & masterNodeOut_arvalid;
  always_comb begin
    casez (state)
      3'b000:
        casez_tmp_0 = 3'h0;
      3'b001:
        casez_tmp_0 =
          flush_REG
            ? 3'h1
            : _Icache_io_cache_hit | _state_T_2 ? {1'h0, _state_T_2 ? 2'h2 : 2'h1} : 3'h5;
      3'b010:
        casez_tmp_0 = {2'h1, _state_T_13};
      3'b011:
        casez_tmp_0 = _state_T_15 ? 3'h4 : 3'h3;
      3'b100:
        casez_tmp_0 = Icache_io_addr_valid | flush_REG ? 3'h1 : 3'h4;
      3'b101:
        casez_tmp_0 = _state_T_13 ? 3'h6 : 3'h5;
      3'b110:
        casez_tmp_0 = {2'h3, _state_T_15 & (&Multi_transfer_counter)};
      default:
        casez_tmp_0 = 3'h1;
    endcase
  end // always_comb
  reg          cache_Catch_io_Icache_REG;
  reg  [31:0]  MAT_Counter;
  always @(posedge clock) begin
    if (reset) begin
      state <= 3'h1;
      flush_REG <= 1'h0;
      pc <= 32'h80000000;
      dnpc <= 32'h0;
      Multi_transfer_0 <= 32'h0;
      Multi_transfer_1 <= 32'h0;
      Multi_transfer_2 <= 32'h0;
      Multi_transfer_3 <= 32'h0;
      Multi_transfer_counter <= 2'h0;
      transfer <= 32'h0;
      MAT_Counter <= 32'h0;
    end
    else begin
      state <= casez_tmp_0;
      flush_REG <= io_Pipeline_ctrl_flush | ~_cache_Catch_io_Icache_T & flush_REG;
      if (flush_REG & _cache_Catch_io_Icache_T)
        pc <= dnpc;
      else if (Icache_io_addr_valid)
        pc <= pc + 32'h4;
      if (io_Pipeline_ctrl_flush)
        dnpc <= io_WBU_2_IFU_Next_PC;
      if (_state_T_15) begin
        Multi_transfer_0 <= Multi_transfer_1;
        Multi_transfer_1 <= Multi_transfer_2;
        Multi_transfer_2 <= Multi_transfer_3;
        Multi_transfer_3 <= auto_master_out_rdata;
        transfer <= auto_master_out_rdata;
      end
      if (_state_T_15 & state == 3'h6) begin
        if (&Multi_transfer_counter)
          Multi_transfer_counter <= 2'h0;
        else
          Multi_transfer_counter <= Multi_transfer_counter + 2'h1;
      end
      if (_cache_Catch_io_Icache_T)
        MAT_Counter <= 32'h1;
      else
        MAT_Counter <= MAT_Counter + 32'h1;
    end
    cache_Catch_io_Icache_REG <= _cache_Catch_io_Icache_T & ~reset;
  end // always @(posedge)
  Icache Icache (
    .clock                 (clock),
    .reset                 (reset),
    .io_addr_valid         (Icache_io_addr_valid),
    .io_addr_bits          (pc),
    .io_data               (_Icache_io_data),
    .io_cache_hit          (_Icache_io_cache_hit),
    .io_replace_data_valid (&state),
    .io_replace_data_bits
      ({Multi_transfer_3, Multi_transfer_2, Multi_transfer_1, Multi_transfer_0}),
    .io_replace_addr       (pc),
    .io_flush              (io_Pipeline_ctrl_flush)
  );
  IFU_catch Catch (
    .clock (clock),
    .valid (Icache_io_addr_valid & ~reset),
    .pc    (pc),
    .inst  (inst)
  );
  Icache_catch cache_Catch (
    .Icache    (cache_Catch_io_Icache_REG),
    .map_hit   (~_state_T_2),
    .cache_hit (_Icache_io_cache_hit & ~_state_T_2)
  );
  Icache_MAT_catch MAT_Catch (
    .valid (Icache_io_addr_valid & ~reset),
    .count (MAT_Counter)
  );
  assign auto_master_out_arvalid = masterNodeOut_arvalid;
  assign auto_master_out_araddr =
    _masterNodeOut_araddr_T
      ? pc
      : {28'h0, Multi_transfer_counter, 2'h0} + (pc & 32'hFFFFFFF0);
  assign auto_master_out_arlen = {6'h0, {2{_masterNodeOut_arlen_T}}};
  assign auto_master_out_rready = masterNodeOut_rready;
  assign io_IFU_2_IDU_valid = io_IFU_2_IDU_valid_0;
  assign io_IFU_2_IDU_bits_data = inst;
  assign io_IFU_2_IDU_bits_PC = pc;
endmodule

// external module LSU_catch

module LSU(
  input         clock,
                reset,
                auto_master_out_awready,
  output        auto_master_out_awvalid,
  output [31:0] auto_master_out_awaddr,
  input         auto_master_out_wready,
  output        auto_master_out_wvalid,
  output [31:0] auto_master_out_wdata,
  output [3:0]  auto_master_out_wstrb,
  output        auto_master_out_bready,
  input         auto_master_out_bvalid,
                auto_master_out_arready,
  output        auto_master_out_arvalid,
  output [31:0] auto_master_out_araddr,
  output        auto_master_out_rready,
  input         auto_master_out_rvalid,
  input  [31:0] auto_master_out_rdata,
  output        io_IDU_2_EXU_ready,
  input         io_IDU_2_EXU_valid,
  input  [2:0]  io_IDU_2_EXU_bits_Branch,
                io_IDU_2_EXU_bits_MemOp,
  input  [31:0] io_IDU_2_EXU_bits_EXU_A,
                io_IDU_2_EXU_bits_EXU_B,
  input  [3:0]  io_IDU_2_EXU_bits_EXUctr,
  input  [1:0]  io_IDU_2_EXU_bits_csr_ctr,
  input  [31:0] io_IDU_2_EXU_bits_Imm,
  input  [3:0]  io_IDU_2_EXU_bits_GPR_waddr,
  input  [31:0] io_IDU_2_EXU_bits_PC,
  output        io_EXU_2_WBU_valid,
  output [2:0]  io_EXU_2_WBU_bits_Branch,
  output        io_EXU_2_WBU_bits_MemtoReg,
  output [1:0]  io_EXU_2_WBU_bits_csr_ctr,
  output [11:0] io_EXU_2_WBU_bits_CSR_waddr,
  output [3:0]  io_EXU_2_WBU_bits_GPR_waddr,
  output [31:0] io_EXU_2_WBU_bits_PC,
                io_EXU_2_WBU_bits_CSR_rdata,
                io_EXU_2_WBU_bits_Mem_rdata,
  input         io_flush
);

  wire        io_EXU_2_WBU_valid_0;
  reg  [2:0]  state;
  reg  [2:0]  casez_tmp;
  wire [2:0]  _state_T_13 = auto_master_out_wready ? 3'h5 : 3'h3;
  wire [2:0]  _GEN =
    {1'h0,
     ~(|state) & io_IDU_2_EXU_valid & ~io_flush
       ? (io_IDU_2_EXU_bits_EXUctr == 4'hD
            ? 2'h2
            : {1'h0, io_IDU_2_EXU_bits_EXUctr == 4'hC})
       : 2'h0};
  always_comb begin
    casez (state)
      3'b000:
        casez_tmp = _GEN;
      3'b001:
        casez_tmp = auto_master_out_arready ? 3'h4 : 3'h1;
      3'b010:
        casez_tmp = auto_master_out_awready ? _state_T_13 : 3'h2;
      3'b011:
        casez_tmp = _state_T_13;
      3'b100:
        casez_tmp = {~io_EXU_2_WBU_valid_0, 2'h0};
      3'b101:
        casez_tmp = io_EXU_2_WBU_valid_0 ? 3'h0 : 3'h5;
      3'b110:
        casez_tmp = _GEN;
      default:
        casez_tmp = _GEN;
    endcase
  end // always_comb
  reg  [31:0] masterNodeOut_araddr_r;
  reg  [31:0] masterNodeOut_awaddr_r;
  reg  [31:0] masterNodeOut_wdata_r;
  wire        masterNodeOut_awvalid = state == 3'h2;
  assign io_EXU_2_WBU_valid_0 =
    state == 3'h5 ? auto_master_out_bvalid : state == 3'h4 & auto_master_out_rvalid;
  wire [31:0] AXI_rdata =
    auto_master_out_rdata >> {27'h0, masterNodeOut_araddr_r[1:0], 3'h0};
  reg  [31:0] Catch_io_diff_skip_r;
  reg  [31:0] Catch_io_diff_skip_r1;
  reg  [31:0] Catch_io_diff_skip_r2;
  wire [31:0] addr = io_IDU_2_EXU_bits_EXU_A + io_IDU_2_EXU_bits_Imm;
  wire [62:0] _data_T_2 = {31'h0, io_IDU_2_EXU_bits_EXU_B} << {58'h0, addr[1:0], 3'h0};
  always @(posedge clock) begin
    if (reset)
      state <= 3'h0;
    else
      state <= casez_tmp;
    if (~(|state) & io_IDU_2_EXU_valid) begin
      masterNodeOut_araddr_r <= addr;
      masterNodeOut_awaddr_r <= addr;
      masterNodeOut_wdata_r <= _data_T_2[31:0];
      Catch_io_diff_skip_r <= addr;
      Catch_io_diff_skip_r1 <= addr;
      Catch_io_diff_skip_r2 <= addr;
    end
  end // always @(posedge)
  LSU_catch Catch (
    .clock     (clock),
    .valid     (io_EXU_2_WBU_valid_0 & ~reset),
    .diff_skip
      ({Catch_io_diff_skip_r[31:29], Catch_io_diff_skip_r[28:12] ^ 17'h10000} == 20'h0
       | Catch_io_diff_skip_r1[31:3] == 29'h14000009
       | Catch_io_diff_skip_r2[31:3] == 29'h1400000A)
  );
  assign auto_master_out_awvalid = masterNodeOut_awvalid;
  assign auto_master_out_awaddr = masterNodeOut_awaddr_r;
  assign auto_master_out_wvalid = masterNodeOut_awvalid | state == 3'h3;
  assign auto_master_out_wdata = masterNodeOut_wdata_r;
  assign auto_master_out_wstrb =
    ~(|io_IDU_2_EXU_bits_MemOp) | io_IDU_2_EXU_bits_MemOp == 3'h1
      ? ((&(masterNodeOut_awaddr_r[1:0]))
           ? 4'h8
           : {1'h0,
              masterNodeOut_awaddr_r[1:0] == 2'h2
                ? 3'h4
                : {1'h0, masterNodeOut_awaddr_r[1:0] == 2'h1 ? 2'h2 : 2'h1}})
      : io_IDU_2_EXU_bits_MemOp == 3'h2 | io_IDU_2_EXU_bits_MemOp == 3'h3
          ? (masterNodeOut_awaddr_r[1:0] == 2'h2
               ? 4'hC
               : {1'h0, masterNodeOut_awaddr_r[1:0] == 2'h1 ? 3'h6 : 3'h3})
          : 4'hF;
  assign auto_master_out_bready = state == 3'h5;
  assign auto_master_out_arvalid = state == 3'h1;
  assign auto_master_out_araddr = masterNodeOut_araddr_r;
  assign auto_master_out_rready = state == 3'h4;
  assign io_IDU_2_EXU_ready = ~(|state);
  assign io_EXU_2_WBU_valid = io_EXU_2_WBU_valid_0;
  assign io_EXU_2_WBU_bits_Branch = io_IDU_2_EXU_bits_Branch;
  assign io_EXU_2_WBU_bits_MemtoReg = io_IDU_2_EXU_bits_EXUctr == 4'hC;
  assign io_EXU_2_WBU_bits_csr_ctr = io_IDU_2_EXU_bits_csr_ctr;
  assign io_EXU_2_WBU_bits_CSR_waddr = io_IDU_2_EXU_bits_Imm[11:0];
  assign io_EXU_2_WBU_bits_GPR_waddr = io_IDU_2_EXU_bits_GPR_waddr;
  assign io_EXU_2_WBU_bits_PC = io_IDU_2_EXU_bits_PC;
  assign io_EXU_2_WBU_bits_CSR_rdata = io_IDU_2_EXU_bits_EXU_B;
  assign io_EXU_2_WBU_bits_Mem_rdata =
    io_IDU_2_EXU_bits_MemOp == 3'h4
      ? AXI_rdata
      : io_IDU_2_EXU_bits_MemOp == 3'h3
          ? {{16{AXI_rdata[15]}}, AXI_rdata[15:0]}
          : io_IDU_2_EXU_bits_MemOp == 3'h2
              ? {16'h0, AXI_rdata[15:0]}
              : io_IDU_2_EXU_bits_MemOp == 3'h1
                  ? {{24{AXI_rdata[7]}}, AXI_rdata[7:0]}
                  : (|io_IDU_2_EXU_bits_MemOp) ? 32'h0 : {24'h0, AXI_rdata[7:0]};
endmodule

module Queue1_UInt3(
  input        clock,
               reset,
  output       io_enq_ready,
  input        io_enq_valid,
  input  [2:0] io_enq_bits,
  input        io_deq_ready,
  output       io_deq_valid,
  output [2:0] io_deq_bits
);

  reg  [2:0] ram;
  reg        full;
  wire       io_deq_valid_0 = io_enq_valid | full;
  wire       do_enq = ~(~full & io_deq_ready) & ~full & io_enq_valid;
  always @(posedge clock) begin
    if (do_enq)
      ram <= io_enq_bits;
    if (reset)
      full <= 1'h0;
    else if (~(do_enq == (full & io_deq_ready & io_deq_valid_0)))
      full <= do_enq;
  end // always @(posedge)
  assign io_enq_ready = ~full;
  assign io_deq_valid = io_deq_valid_0;
  assign io_deq_bits = full ? ram : io_enq_bits;
endmodule

module Queue1_UInt2(
  input        clock,
               reset,
  output       io_enq_ready,
  input        io_enq_valid,
  input  [1:0] io_enq_bits,
  input        io_deq_ready,
  output       io_deq_valid,
  output [1:0] io_deq_bits
);

  reg  [1:0] ram;
  reg        full;
  wire       io_deq_valid_0 = io_enq_valid | full;
  wire       do_enq = ~(~full & io_deq_ready) & ~full & io_enq_valid;
  always @(posedge clock) begin
    if (do_enq)
      ram <= io_enq_bits;
    if (reset)
      full <= 1'h0;
    else if (~(do_enq == (full & io_deq_ready & io_deq_valid_0)))
      full <= do_enq;
  end // always @(posedge)
  assign io_enq_ready = ~full;
  assign io_deq_valid = io_deq_valid_0;
  assign io_deq_bits = full ? ram : io_enq_bits;
endmodule

module AXI4Xbar(
  input         clock,
                reset,
  output        auto_anon_in_1_awready,
  input         auto_anon_in_1_awvalid,
  input  [31:0] auto_anon_in_1_awaddr,
  output        auto_anon_in_1_wready,
  input         auto_anon_in_1_wvalid,
  input  [31:0] auto_anon_in_1_wdata,
  input  [3:0]  auto_anon_in_1_wstrb,
  input         auto_anon_in_1_bready,
  output        auto_anon_in_1_bvalid,
                auto_anon_in_1_arready,
  input         auto_anon_in_1_arvalid,
  input  [31:0] auto_anon_in_1_araddr,
  input         auto_anon_in_1_rready,
  output        auto_anon_in_1_rvalid,
  output [31:0] auto_anon_in_1_rdata,
  output        auto_anon_in_0_arready,
  input         auto_anon_in_0_arvalid,
  input  [31:0] auto_anon_in_0_araddr,
  input  [7:0]  auto_anon_in_0_arlen,
  input         auto_anon_in_0_rready,
  output        auto_anon_in_0_rvalid,
  output [31:0] auto_anon_in_0_rdata,
  input         auto_anon_out_2_awready,
  output        auto_anon_out_2_awvalid,
  output [4:0]  auto_anon_out_2_awid,
  output [31:0] auto_anon_out_2_awaddr,
  input         auto_anon_out_2_wready,
  output        auto_anon_out_2_wvalid,
  output [31:0] auto_anon_out_2_wdata,
  output [3:0]  auto_anon_out_2_wstrb,
  output        auto_anon_out_2_bready,
  input         auto_anon_out_2_bvalid,
  input  [4:0]  auto_anon_out_2_bid,
  input         auto_anon_out_2_arready,
  output        auto_anon_out_2_arvalid,
  output [4:0]  auto_anon_out_2_arid,
  output [31:0] auto_anon_out_2_araddr,
  output [7:0]  auto_anon_out_2_arlen,
  output        auto_anon_out_2_rready,
  input         auto_anon_out_2_rvalid,
  input  [4:0]  auto_anon_out_2_rid,
  input  [31:0] auto_anon_out_2_rdata,
  input         auto_anon_out_2_rlast,
                auto_anon_out_1_arready,
  output        auto_anon_out_1_arvalid,
  output [31:0] auto_anon_out_1_araddr,
  output        auto_anon_out_1_rready,
  input         auto_anon_out_1_rvalid,
  input  [31:0] auto_anon_out_1_rdata,
  input         auto_anon_out_0_awready,
  output        auto_anon_out_0_awvalid,
  output [4:0]  auto_anon_out_0_awid,
  input         auto_anon_out_0_wready,
  output        auto_anon_out_0_wvalid,
  output [31:0] auto_anon_out_0_wdata,
  output        auto_anon_out_0_bready,
  input         auto_anon_out_0_bvalid,
  input  [4:0]  auto_anon_out_0_bid
);

  wire [3:0] _in_1_bT_9;
  wire       in_1_bvalid;
  wire       allowed_6_2;
  wire       allowed_6_0;
  wire [3:0] _in_1_rT_19;
  wire       _in_1_rT_4;
  wire       in_1_rvalid;
  wire       allowed_5_2;
  wire [3:0] _in_0_rT_17;
  wire       _in_0_rT_2;
  wire       in_0_rvalid;
  wire       allowed_3_2;
  wire       _out_2_wT_4;
  wire       _out_2_wvalid_T_3;
  wire       _filtered_2_ready_T_4;
  wire       allowed_2_1;
  wire       allowed_2_0;
  wire       out_2_awvalid;
  wire       awOut_2_io_enq_bits_allowed_1;
  wire       allowed_1_1;
  wire       allowed_1_0;
  wire       _out_0_wT_4;
  wire       _out_0_wvalid_T_3;
  wire       _filtered_0_ready_T_4;
  wire       out_0_awvalid;
  wire       awOut_0_io_enq_bits_allowed_1;
  wire       _portsWOI_in_1_wready_T_4;
  wire       _portsAWOI_in_1_awready_T_4;
  wire       _portsAROI_in_1_arready_T_4;
  wire       _portsAROI_in_0_arready_T_4;
  wire       anonIn_1_awready;
  wire       anonIn_1_arready;
  wire       anonIn_arready;
  wire       _awOut_2_io_enq_ready;
  wire       _awOut_2_io_deq_valid;
  wire [1:0] _awOut_2_io_deq_bits;
  wire       _awOut_0_io_enq_ready;
  wire       _awOut_0_io_deq_valid;
  wire [1:0] _awOut_0_io_deq_bits;
  wire       _awIn_1_io_enq_ready;
  wire       _awIn_1_io_deq_valid;
  wire [2:0] _awIn_1_io_deq_bits;
  wire [2:0] _requestARIO_T_5 = auto_anon_in_0_araddr[31:29] ^ 3'h5;
  wire       requestARIO_0_1 = {_requestARIO_T_5[2], _requestARIO_T_5[0]} == 2'h0;
  wire       requestARIO_0_2 =
    {~(auto_anon_in_0_araddr[31]), auto_anon_in_0_araddr[29]} == 2'h0;
  wire [2:0] _requestARIO_T_20 = auto_anon_in_1_araddr[31:29] ^ 3'h5;
  wire       requestARIO_1_1 = {_requestARIO_T_20[2], _requestARIO_T_20[0]} == 2'h0;
  wire       requestARIO_1_2 =
    {~(auto_anon_in_1_araddr[31]), auto_anon_in_1_araddr[29]} == 2'h0;
  wire       requestAWIO_1_0 =
    {auto_anon_in_1_awaddr[31], auto_anon_in_1_awaddr[29]} == 2'h0;
  wire [2:0] _requestAWIO_T_20 = auto_anon_in_1_awaddr[31:29] ^ 3'h5;
  wire       requestAWIO_1_1 = {_requestAWIO_T_20[2], _requestAWIO_T_20[0]} == 2'h0;
  wire       requestAWIO_1_2 =
    {~(auto_anon_in_1_awaddr[31]), auto_anon_in_1_awaddr[29]} == 2'h0;
  wire       _arFIFOMap_15_T_1 = anonIn_arready & auto_anon_in_0_arvalid;
  wire       _arFIFOMap_15_T_4 = auto_anon_in_0_rready & in_0_rvalid;
  wire       _arFIFOMap_0_T_6 =
    _in_0_rT_17 == 4'h0 & _arFIFOMap_15_T_4 & _in_0_rT_2;
  reg        arFIFOMap_0_count;
  wire       _arFIFOMap_1_T_6 =
    _in_0_rT_17 == 4'h1 & _arFIFOMap_15_T_4 & _in_0_rT_2;
  reg        arFIFOMap_1_count;
  wire       _arFIFOMap_2_T_6 =
    _in_0_rT_17 == 4'h2 & _arFIFOMap_15_T_4 & _in_0_rT_2;
  reg        arFIFOMap_2_count;
  wire       _arFIFOMap_3_T_6 =
    _in_0_rT_17 == 4'h3 & _arFIFOMap_15_T_4 & _in_0_rT_2;
  reg        arFIFOMap_3_count;
  wire       _arFIFOMap_4_T_6 =
    _in_0_rT_17 == 4'h4 & _arFIFOMap_15_T_4 & _in_0_rT_2;
  reg        arFIFOMap_4_count;
  wire       _arFIFOMap_5_T_6 =
    _in_0_rT_17 == 4'h5 & _arFIFOMap_15_T_4 & _in_0_rT_2;
  reg        arFIFOMap_5_count;
  wire       _arFIFOMap_6_T_6 =
    _in_0_rT_17 == 4'h6 & _arFIFOMap_15_T_4 & _in_0_rT_2;
  reg        arFIFOMap_6_count;
  wire       _arFIFOMap_7_T_6 =
    _in_0_rT_17 == 4'h7 & _arFIFOMap_15_T_4 & _in_0_rT_2;
  reg        arFIFOMap_7_count;
  wire       _arFIFOMap_8_T_6 =
    _in_0_rT_17 == 4'h8 & _arFIFOMap_15_T_4 & _in_0_rT_2;
  reg        arFIFOMap_8_count;
  wire       _arFIFOMap_9_T_6 =
    _in_0_rT_17 == 4'h9 & _arFIFOMap_15_T_4 & _in_0_rT_2;
  reg        arFIFOMap_9_count;
  wire       _arFIFOMap_10_T_6 =
    _in_0_rT_17 == 4'hA & _arFIFOMap_15_T_4 & _in_0_rT_2;
  reg        arFIFOMap_10_count;
  wire       _arFIFOMap_11_T_6 =
    _in_0_rT_17 == 4'hB & _arFIFOMap_15_T_4 & _in_0_rT_2;
  reg        arFIFOMap_11_count;
  wire       _arFIFOMap_12_T_6 =
    _in_0_rT_17 == 4'hC & _arFIFOMap_15_T_4 & _in_0_rT_2;
  reg        arFIFOMap_12_count;
  wire       _arFIFOMap_13_T_6 =
    _in_0_rT_17 == 4'hD & _arFIFOMap_15_T_4 & _in_0_rT_2;
  reg        arFIFOMap_13_count;
  wire       _arFIFOMap_14_T_6 =
    _in_0_rT_17 == 4'hE & _arFIFOMap_15_T_4 & _in_0_rT_2;
  reg        arFIFOMap_14_count;
  wire       _arFIFOMap_15_T_6 =
    (&_in_0_rT_17) & _arFIFOMap_15_T_4 & _in_0_rT_2;
  reg        arFIFOMap_15_count;
  wire       in_0_arvalid = auto_anon_in_0_arvalid & ~arFIFOMap_0_count;
  assign anonIn_arready = _portsAROI_in_0_arready_T_4 & ~arFIFOMap_0_count;
  wire       _arFIFOMap_15_T_25 = anonIn_1_arready & auto_anon_in_1_arvalid;
  wire       _arFIFOMap_15_T_28 = auto_anon_in_1_rready & in_1_rvalid;
  wire       _arFIFOMap_0_T_30 =
    _in_1_rT_19 == 4'h0 & _arFIFOMap_15_T_28 & _in_1_rT_4;
  reg        arFIFOMap_0_count_1;
  wire       _awFIFOMap_15_T_24 = anonIn_1_awready & auto_anon_in_1_awvalid;
  wire       _awFIFOMap_15_T_27 = auto_anon_in_1_bready & in_1_bvalid;
  wire       _awFIFOMap_0_T_28 = _in_1_bT_9 == 4'h0 & _awFIFOMap_15_T_27;
  reg        awFIFOMap_0_count_1;
  wire       _arFIFOMap_1_T_30 =
    _in_1_rT_19 == 4'h1 & _arFIFOMap_15_T_28 & _in_1_rT_4;
  reg        arFIFOMap_1_count_1;
  wire       _awFIFOMap_1_T_28 = _in_1_bT_9 == 4'h1 & _awFIFOMap_15_T_27;
  reg        awFIFOMap_1_count_1;
  wire       _arFIFOMap_2_T_30 =
    _in_1_rT_19 == 4'h2 & _arFIFOMap_15_T_28 & _in_1_rT_4;
  reg        arFIFOMap_2_count_1;
  wire       _awFIFOMap_2_T_28 = _in_1_bT_9 == 4'h2 & _awFIFOMap_15_T_27;
  reg        awFIFOMap_2_count_1;
  wire       _arFIFOMap_3_T_30 =
    _in_1_rT_19 == 4'h3 & _arFIFOMap_15_T_28 & _in_1_rT_4;
  reg        arFIFOMap_3_count_1;
  wire       _awFIFOMap_3_T_28 = _in_1_bT_9 == 4'h3 & _awFIFOMap_15_T_27;
  reg        awFIFOMap_3_count_1;
  wire       _arFIFOMap_4_T_30 =
    _in_1_rT_19 == 4'h4 & _arFIFOMap_15_T_28 & _in_1_rT_4;
  reg        arFIFOMap_4_count_1;
  wire       _awFIFOMap_4_T_28 = _in_1_bT_9 == 4'h4 & _awFIFOMap_15_T_27;
  reg        awFIFOMap_4_count_1;
  wire       _arFIFOMap_5_T_30 =
    _in_1_rT_19 == 4'h5 & _arFIFOMap_15_T_28 & _in_1_rT_4;
  reg        arFIFOMap_5_count_1;
  wire       _awFIFOMap_5_T_28 = _in_1_bT_9 == 4'h5 & _awFIFOMap_15_T_27;
  reg        awFIFOMap_5_count_1;
  wire       _arFIFOMap_6_T_30 =
    _in_1_rT_19 == 4'h6 & _arFIFOMap_15_T_28 & _in_1_rT_4;
  reg        arFIFOMap_6_count_1;
  wire       _awFIFOMap_6_T_28 = _in_1_bT_9 == 4'h6 & _awFIFOMap_15_T_27;
  reg        awFIFOMap_6_count_1;
  wire       _arFIFOMap_7_T_30 =
    _in_1_rT_19 == 4'h7 & _arFIFOMap_15_T_28 & _in_1_rT_4;
  reg        arFIFOMap_7_count_1;
  wire       _awFIFOMap_7_T_28 = _in_1_bT_9 == 4'h7 & _awFIFOMap_15_T_27;
  reg        awFIFOMap_7_count_1;
  wire       _arFIFOMap_8_T_30 =
    _in_1_rT_19 == 4'h8 & _arFIFOMap_15_T_28 & _in_1_rT_4;
  reg        arFIFOMap_8_count_1;
  wire       _awFIFOMap_8_T_28 = _in_1_bT_9 == 4'h8 & _awFIFOMap_15_T_27;
  reg        awFIFOMap_8_count_1;
  wire       _arFIFOMap_9_T_30 =
    _in_1_rT_19 == 4'h9 & _arFIFOMap_15_T_28 & _in_1_rT_4;
  reg        arFIFOMap_9_count_1;
  wire       _awFIFOMap_9_T_28 = _in_1_bT_9 == 4'h9 & _awFIFOMap_15_T_27;
  reg        awFIFOMap_9_count_1;
  wire       _arFIFOMap_10_T_30 =
    _in_1_rT_19 == 4'hA & _arFIFOMap_15_T_28 & _in_1_rT_4;
  reg        arFIFOMap_10_count_1;
  wire       _awFIFOMap_10_T_28 = _in_1_bT_9 == 4'hA & _awFIFOMap_15_T_27;
  reg        awFIFOMap_10_count_1;
  wire       _arFIFOMap_11_T_30 =
    _in_1_rT_19 == 4'hB & _arFIFOMap_15_T_28 & _in_1_rT_4;
  reg        arFIFOMap_11_count_1;
  wire       _awFIFOMap_11_T_28 = _in_1_bT_9 == 4'hB & _awFIFOMap_15_T_27;
  reg        awFIFOMap_11_count_1;
  wire       _arFIFOMap_12_T_30 =
    _in_1_rT_19 == 4'hC & _arFIFOMap_15_T_28 & _in_1_rT_4;
  reg        arFIFOMap_12_count_1;
  wire       _awFIFOMap_12_T_28 = _in_1_bT_9 == 4'hC & _awFIFOMap_15_T_27;
  reg        awFIFOMap_12_count_1;
  wire       _arFIFOMap_13_T_30 =
    _in_1_rT_19 == 4'hD & _arFIFOMap_15_T_28 & _in_1_rT_4;
  reg        arFIFOMap_13_count_1;
  wire       _awFIFOMap_13_T_28 = _in_1_bT_9 == 4'hD & _awFIFOMap_15_T_27;
  reg        awFIFOMap_13_count_1;
  wire       _arFIFOMap_14_T_30 =
    _in_1_rT_19 == 4'hE & _arFIFOMap_15_T_28 & _in_1_rT_4;
  reg        arFIFOMap_14_count_1;
  wire       _awFIFOMap_14_T_28 = _in_1_bT_9 == 4'hE & _awFIFOMap_15_T_27;
  reg        awFIFOMap_14_count_1;
  wire       _arFIFOMap_15_T_30 =
    (&_in_1_rT_19) & _arFIFOMap_15_T_28 & _in_1_rT_4;
  reg        arFIFOMap_15_count_1;
  wire       _awFIFOMap_15_T_28 = (&_in_1_bT_9) & _awFIFOMap_15_T_27;
  reg        awFIFOMap_15_count_1;
  wire       in_1_arvalid = auto_anon_in_1_arvalid & ~arFIFOMap_1_count_1;
  assign anonIn_1_arready = _portsAROI_in_1_arready_T_4 & ~arFIFOMap_1_count_1;
  reg        latched_1;
  wire       _anonIn_awready_T_3 = latched_1 | _awIn_1_io_enq_ready;
  wire       in_1_awvalid =
    auto_anon_in_1_awvalid & _anonIn_awready_T_3 & ~awFIFOMap_1_count_1;
  assign anonIn_1_awready =
    _portsAWOI_in_1_awready_T_4 & _anonIn_awready_T_3 & ~awFIFOMap_1_count_1;
  wire       awIn_1_io_enq_valid = auto_anon_in_1_awvalid & ~latched_1;
  wire       in_1_wvalid = auto_anon_in_1_wvalid & _awIn_1_io_deq_valid;
  reg        latched_2;
  wire       _out_0_awready_T = latched_2 | _awOut_0_io_enq_ready;
  wire       out_0_awready = auto_anon_out_0_awready & _out_0_awready_T;
  wire       awOut_0_io_enq_valid = out_0_awvalid & ~latched_2;
  reg        latched_4;
  wire       _out_2_awready_T = latched_4 | _awOut_2_io_enq_ready;
  wire       out_2_awready = auto_anon_out_2_awready & _out_2_awready_T;
  wire       awOut_2_io_enq_valid = out_2_awvalid & ~latched_4;
  wire       portsAROI_filtered_0_valid =
    in_0_arvalid
    & {auto_anon_in_0_araddr[31], auto_anon_in_0_araddr[29]} == 2'h0;
  wire       portsAROI_filtered_1_valid = in_0_arvalid & requestARIO_0_1;
  wire       portsAROI_filtered_2_valid = in_0_arvalid & requestARIO_0_2;
  assign _portsAROI_in_0_arready_T_4 =
    requestARIO_0_1 & auto_anon_out_1_arready & allowed_1_0 | requestARIO_0_2
    & auto_anon_out_2_arready & allowed_2_0;
  wire       portsAROI_filtered_1_0_valid =
    in_1_arvalid
    & {auto_anon_in_1_araddr[31], auto_anon_in_1_araddr[29]} == 2'h0;
  wire       portsAROI_filtered_1_1_valid = in_1_arvalid & requestARIO_1_1;
  wire       portsAROI_filtered_1_2_valid = in_1_arvalid & requestARIO_1_2;
  assign _portsAROI_in_1_arready_T_4 =
    requestARIO_1_1 & auto_anon_out_1_arready & allowed_1_1 | requestARIO_1_2
    & auto_anon_out_2_arready & allowed_2_1;
  wire       portsAWOI_filtered_1_0_valid = in_1_awvalid & requestAWIO_1_0;
  wire       portsAWOI_filtered_1_1_valid = in_1_awvalid & requestAWIO_1_1;
  wire       portsAWOI_filtered_1_2_valid = in_1_awvalid & requestAWIO_1_2;
  assign _portsAWOI_in_1_awready_T_4 =
    requestAWIO_1_0 & out_0_awready & awOut_0_io_enq_bits_allowed_1 | requestAWIO_1_2
    & out_2_awready & awOut_2_io_enq_bits_allowed_1;
  assign _portsWOI_in_1_wready_T_4 =
    _awIn_1_io_deq_bits[0] & auto_anon_out_0_wready & _awOut_0_io_deq_valid
    & _filtered_0_ready_T_4 | _awIn_1_io_deq_bits[2] & auto_anon_out_2_wready
    & _awOut_2_io_deq_valid & _filtered_2_ready_T_4;
  wire       portsRIO_filtered_2_0_valid =
    auto_anon_out_2_rvalid & auto_anon_out_2_rid[4];
  wire       portsRIO_filtered_2_1_valid =
    auto_anon_out_2_rvalid & ~(auto_anon_out_2_rid[4]);
  wire       portsBIO_filtered_0_valid =
    auto_anon_out_0_bvalid & auto_anon_out_0_bid[4];
  wire       portsBIO_filtered_1_valid =
    auto_anon_out_0_bvalid & ~(auto_anon_out_0_bid[4]);
  wire       portsBIO_filtered_2_0_valid =
    auto_anon_out_2_bvalid & auto_anon_out_2_bid[4];
  wire       portsBIO_filtered_2_1_valid =
    auto_anon_out_2_bvalid & ~(auto_anon_out_2_bid[4]);
  reg        awOut_0_io_enq_bits_idle;
  wire [1:0] awOut_0_io_enq_bits_readys_valid = {portsAWOI_filtered_1_0_valid, 1'h0};
  reg  [1:0] awOut_0_io_enq_bits_readys_mask;
  wire [1:0] _awOut_0_io_enq_bits_readys_filter_T_1 =
    awOut_0_io_enq_bits_readys_valid & ~awOut_0_io_enq_bits_readys_mask;
  wire [1:0] awOut_0_io_enq_bits_readys_readys =
    ~({awOut_0_io_enq_bits_readys_mask[1],
       _awOut_0_io_enq_bits_readys_filter_T_1[1] | awOut_0_io_enq_bits_readys_mask[0]}
      & {_awOut_0_io_enq_bits_readys_filter_T_1[1],
         portsAWOI_filtered_1_0_valid | _awOut_0_io_enq_bits_readys_filter_T_1[0]});
  wire       awOut_0_io_enq_bits_winner_1 =
    awOut_0_io_enq_bits_readys_readys[1] & portsAWOI_filtered_1_0_valid;
  reg        awOut_0_io_enq_bits_state_1;
  wire       awOut_0_io_enq_bits_muxState_1 =
    awOut_0_io_enq_bits_idle ? awOut_0_io_enq_bits_winner_1 : awOut_0_io_enq_bits_state_1;
  assign awOut_0_io_enq_bits_allowed_1 =
    awOut_0_io_enq_bits_idle
      ? awOut_0_io_enq_bits_readys_readys[1]
      : awOut_0_io_enq_bits_state_1;
  assign out_0_awvalid =
    (awOut_0_io_enq_bits_idle | awOut_0_io_enq_bits_state_1)
    & portsAWOI_filtered_1_0_valid;
  reg        idle;
  wire       anyValid = portsAROI_filtered_0_valid | portsAROI_filtered_1_0_valid;
  wire [1:0] readys_valid = {portsAROI_filtered_1_0_valid, portsAROI_filtered_0_valid};
  reg  [1:0] readys_mask;
  wire [1:0] _readys_filter_T_1 = readys_valid & ~readys_mask;
  wire [1:0] readys_readys =
    ~({readys_mask[1], _readys_filter_T_1[1] | readys_mask[0]}
      & ({_readys_filter_T_1[0], portsAROI_filtered_1_0_valid} | _readys_filter_T_1));
  assign _filtered_0_ready_T_4 = _awOut_0_io_deq_bits[1];
  assign _out_0_wvalid_T_3 =
    _filtered_0_ready_T_4 & in_1_wvalid & _awIn_1_io_deq_bits[0];
  assign _out_0_wT_4 = |_awOut_0_io_deq_bits;
  reg        awOut_1_io_enq_bits_idle;
  wire [1:0] awOut_1_io_enq_bits_readys_valid = {portsAWOI_filtered_1_1_valid, 1'h0};
  reg  [1:0] awOut_1_io_enq_bits_readys_mask;
  wire [1:0] _awOut_1_io_enq_bits_readys_filter_T_1 =
    awOut_1_io_enq_bits_readys_valid & ~awOut_1_io_enq_bits_readys_mask;
  wire [1:0] awOut_1_io_enq_bits_readys_readys =
    ~({awOut_1_io_enq_bits_readys_mask[1],
       _awOut_1_io_enq_bits_readys_filter_T_1[1] | awOut_1_io_enq_bits_readys_mask[0]}
      & {_awOut_1_io_enq_bits_readys_filter_T_1[1],
         portsAWOI_filtered_1_1_valid | _awOut_1_io_enq_bits_readys_filter_T_1[0]});
  reg        idle_1;
  wire       anyValid_1 = portsAROI_filtered_1_valid | portsAROI_filtered_1_1_valid;
  wire [1:0] readys_valid_1 = {portsAROI_filtered_1_1_valid, portsAROI_filtered_1_valid};
  reg  [1:0] readys_mask_1;
  wire [1:0] _readys_filter_T_3 = readys_valid_1 & ~readys_mask_1;
  wire [1:0] readys_readys_1 =
    ~({readys_mask_1[1], _readys_filter_T_3[1] | readys_mask_1[0]}
      & ({_readys_filter_T_3[0], portsAROI_filtered_1_1_valid} | _readys_filter_T_3));
  wire       winner_1_0 = readys_readys_1[0] & portsAROI_filtered_1_valid;
  wire       winner_1_1 = readys_readys_1[1] & portsAROI_filtered_1_1_valid;
  reg        state_1_0;
  reg        state_1_1;
  assign allowed_1_0 = idle_1 ? readys_readys_1[0] : state_1_0;
  assign allowed_1_1 = idle_1 ? readys_readys_1[1] : state_1_1;
  wire       out_1_arvalid =
    idle_1
      ? anyValid_1
      : state_1_0 & portsAROI_filtered_1_valid | state_1_1 & portsAROI_filtered_1_1_valid;
  reg        awOut_2_io_enq_bits_idle;
  wire [1:0] awOut_2_io_enq_bits_readys_valid = {portsAWOI_filtered_1_2_valid, 1'h0};
  reg  [1:0] awOut_2_io_enq_bits_readys_mask;
  wire [1:0] _awOut_2_io_enq_bits_readys_filter_T_1 =
    awOut_2_io_enq_bits_readys_valid & ~awOut_2_io_enq_bits_readys_mask;
  wire [1:0] awOut_2_io_enq_bits_readys_readys =
    ~({awOut_2_io_enq_bits_readys_mask[1],
       _awOut_2_io_enq_bits_readys_filter_T_1[1] | awOut_2_io_enq_bits_readys_mask[0]}
      & {_awOut_2_io_enq_bits_readys_filter_T_1[1],
         portsAWOI_filtered_1_2_valid | _awOut_2_io_enq_bits_readys_filter_T_1[0]});
  wire       awOut_2_io_enq_bits_winner_1 =
    awOut_2_io_enq_bits_readys_readys[1] & portsAWOI_filtered_1_2_valid;
  reg        awOut_2_io_enq_bits_state_1;
  wire       awOut_2_io_enq_bits_muxState_1 =
    awOut_2_io_enq_bits_idle ? awOut_2_io_enq_bits_winner_1 : awOut_2_io_enq_bits_state_1;
  assign awOut_2_io_enq_bits_allowed_1 =
    awOut_2_io_enq_bits_idle
      ? awOut_2_io_enq_bits_readys_readys[1]
      : awOut_2_io_enq_bits_state_1;
  assign out_2_awvalid =
    (awOut_2_io_enq_bits_idle | awOut_2_io_enq_bits_state_1)
    & portsAWOI_filtered_1_2_valid;
  reg        idle_2;
  wire       anyValid_2 = portsAROI_filtered_2_valid | portsAROI_filtered_1_2_valid;
  wire [1:0] readys_valid_2 = {portsAROI_filtered_1_2_valid, portsAROI_filtered_2_valid};
  reg  [1:0] readys_mask_2;
  wire [1:0] _readys_filter_T_5 = readys_valid_2 & ~readys_mask_2;
  wire [1:0] readys_readys_2 =
    ~({readys_mask_2[1], _readys_filter_T_5[1] | readys_mask_2[0]}
      & ({_readys_filter_T_5[0], portsAROI_filtered_1_2_valid} | _readys_filter_T_5));
  wire       winner_2_0 = readys_readys_2[0] & portsAROI_filtered_2_valid;
  wire       winner_2_1 = readys_readys_2[1] & portsAROI_filtered_1_2_valid;
  reg        state_2_0;
  reg        state_2_1;
  wire       muxState_2_0 = idle_2 ? winner_2_0 : state_2_0;
  wire       muxState_2_1 = idle_2 ? winner_2_1 : state_2_1;
  assign allowed_2_0 = idle_2 ? readys_readys_2[0] : state_2_0;
  assign allowed_2_1 = idle_2 ? readys_readys_2[1] : state_2_1;
  wire       out_2_arvalid =
    idle_2
      ? anyValid_2
      : state_2_0 & portsAROI_filtered_2_valid | state_2_1 & portsAROI_filtered_1_2_valid;
  assign _filtered_2_ready_T_4 = _awOut_2_io_deq_bits[1];
  assign _out_2_wvalid_T_3 =
    _filtered_2_ready_T_4 & in_1_wvalid & _awIn_1_io_deq_bits[2];
  assign _out_2_wT_4 = |_awOut_2_io_deq_bits;
  reg        idle_3;
  wire [2:0] readys_valid_3 = {portsRIO_filtered_2_0_valid, 2'h0};
  reg  [2:0] readys_mask_3;
  wire [2:0] _readys_filter_T_7 = readys_valid_3 & ~readys_mask_3;
  wire [1:0] _GEN = _readys_filter_T_7[1:0] | _readys_filter_T_7[2:1];
  wire [2:0] readys_readys_3 =
    ~({readys_mask_3[2],
       _readys_filter_T_7[2] | readys_mask_3[1],
       _GEN[1] | readys_mask_3[0]}
      & {_GEN[0] | _readys_filter_T_7[2],
         portsRIO_filtered_2_0_valid | _readys_filter_T_7[0] | _GEN[1],
         portsRIO_filtered_2_0_valid | _GEN[0]});
  wire       winner_3_2 = readys_readys_3[2] & portsRIO_filtered_2_0_valid;
  reg        state_3_2;
  wire       muxState_3_2 = idle_3 ? winner_3_2 : state_3_2;
  assign allowed_3_2 = idle_3 ? readys_readys_3[2] : state_3_2;
  assign in_0_rvalid = (idle_3 | state_3_2) & portsRIO_filtered_2_0_valid;
  assign _in_0_rT_2 = muxState_3_2 & auto_anon_out_2_rlast;
  assign _in_0_rT_17 = muxState_3_2 ? auto_anon_out_2_rid[3:0] : 4'h0;
  reg        idle_4;
  wire       anyValid_4 = portsBIO_filtered_0_valid | portsBIO_filtered_2_0_valid;
  wire [2:0] readys_valid_4 =
    {portsBIO_filtered_2_0_valid, 1'h0, portsBIO_filtered_0_valid};
  reg  [2:0] readys_mask_4;
  wire [2:0] _readys_filter_T_9 = readys_valid_4 & ~readys_mask_4;
  wire [1:0] _GEN_0 = _readys_filter_T_9[1:0] | _readys_filter_T_9[2:1];
  wire [2:0] readys_readys_4 =
    ~({readys_mask_4[2],
       _readys_filter_T_9[2] | readys_mask_4[1],
       _GEN_0[1] | readys_mask_4[0]}
      & ({_GEN_0[0],
          portsBIO_filtered_2_0_valid | _readys_filter_T_9[0],
          portsBIO_filtered_2_0_valid} | {_readys_filter_T_9[2], _GEN_0}));
  reg        idle_5;
  wire       anyValid_5 = auto_anon_out_1_rvalid | portsRIO_filtered_2_1_valid;
  wire [2:0] readys_valid_5 =
    {portsRIO_filtered_2_1_valid, auto_anon_out_1_rvalid, 1'h0};
  reg  [2:0] readys_mask_5;
  wire [2:0] _readys_filter_T_11 = readys_valid_5 & ~readys_mask_5;
  wire [1:0] _GEN_1 = _readys_filter_T_11[1:0] | _readys_filter_T_11[2:1];
  wire [2:0] readys_readys_5 =
    ~({readys_mask_5[2],
       _readys_filter_T_11[2] | readys_mask_5[1],
       _GEN_1[1] | readys_mask_5[0]}
      & ({_GEN_1[0],
          portsRIO_filtered_2_1_valid | _readys_filter_T_11[0],
          auto_anon_out_1_rvalid | portsRIO_filtered_2_1_valid}
         | {_readys_filter_T_11[2], _GEN_1}));
  wire       winner_5_1 = readys_readys_5[1] & auto_anon_out_1_rvalid;
  wire       winner_5_2 = readys_readys_5[2] & portsRIO_filtered_2_1_valid;
  reg        state_5_1;
  reg        state_5_2;
  wire       muxState_5_1 = idle_5 ? winner_5_1 : state_5_1;
  wire       muxState_5_2 = idle_5 ? winner_5_2 : state_5_2;
  assign allowed_5_2 = idle_5 ? readys_readys_5[2] : state_5_2;
  assign in_1_rvalid =
    idle_5
      ? anyValid_5
      : state_5_1 & auto_anon_out_1_rvalid | state_5_2 & portsRIO_filtered_2_1_valid;
  assign _in_1_rT_4 = muxState_5_1 | muxState_5_2 & auto_anon_out_2_rlast;
  assign _in_1_rT_19 =
    {3'h0, muxState_5_1} | (muxState_5_2 ? auto_anon_out_2_rid[3:0] : 4'h0);
  reg        idle_6;
  wire       anyValid_6 = portsBIO_filtered_1_valid | portsBIO_filtered_2_1_valid;
  wire [2:0] readys_valid_6 =
    {portsBIO_filtered_2_1_valid, 1'h0, portsBIO_filtered_1_valid};
  reg  [2:0] readys_mask_6;
  wire [2:0] _readys_filter_T_13 = readys_valid_6 & ~readys_mask_6;
  wire [1:0] _GEN_2 = _readys_filter_T_13[1:0] | _readys_filter_T_13[2:1];
  wire [2:0] readys_readys_6 =
    ~({readys_mask_6[2],
       _readys_filter_T_13[2] | readys_mask_6[1],
       _GEN_2[1] | readys_mask_6[0]}
      & ({_GEN_2[0],
          portsBIO_filtered_2_1_valid | _readys_filter_T_13[0],
          portsBIO_filtered_2_1_valid} | {_readys_filter_T_13[2], _GEN_2}));
  wire       winner_6_0 = readys_readys_6[0] & portsBIO_filtered_1_valid;
  wire       winner_6_2 = readys_readys_6[2] & portsBIO_filtered_2_1_valid;
  `ifndef SYNTHESIS
    wire winner_0 = readys_readys[0] & portsAROI_filtered_0_valid;
    wire winner_1 = readys_readys[1] & portsAROI_filtered_1_0_valid;
    wire winner_4_0 = readys_readys_4[0] & portsBIO_filtered_0_valid;
    wire winner_4_2 = readys_readys_4[2] & portsBIO_filtered_2_0_valid;
    always @(posedge clock) begin
      if (~reset & ~(~_arFIFOMap_0_T_6 | arFIFOMap_0_count)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:131 assert (!resp_fire || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_arFIFOMap_15_T_1 | ~arFIFOMap_0_count)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:132 assert (!req_fire  || count =/= flight.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_arFIFOMap_1_T_6 | arFIFOMap_1_count)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:131 assert (!resp_fire || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_arFIFOMap_2_T_6 | arFIFOMap_2_count)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:131 assert (!resp_fire || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_arFIFOMap_3_T_6 | arFIFOMap_3_count)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:131 assert (!resp_fire || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_arFIFOMap_4_T_6 | arFIFOMap_4_count)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:131 assert (!resp_fire || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_arFIFOMap_5_T_6 | arFIFOMap_5_count)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:131 assert (!resp_fire || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_arFIFOMap_6_T_6 | arFIFOMap_6_count)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:131 assert (!resp_fire || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_arFIFOMap_7_T_6 | arFIFOMap_7_count)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:131 assert (!resp_fire || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_arFIFOMap_8_T_6 | arFIFOMap_8_count)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:131 assert (!resp_fire || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_arFIFOMap_9_T_6 | arFIFOMap_9_count)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:131 assert (!resp_fire || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_arFIFOMap_10_T_6 | arFIFOMap_10_count)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:131 assert (!resp_fire || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_arFIFOMap_11_T_6 | arFIFOMap_11_count)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:131 assert (!resp_fire || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_arFIFOMap_12_T_6 | arFIFOMap_12_count)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:131 assert (!resp_fire || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_arFIFOMap_13_T_6 | arFIFOMap_13_count)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:131 assert (!resp_fire || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_arFIFOMap_14_T_6 | arFIFOMap_14_count)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:131 assert (!resp_fire || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_arFIFOMap_15_T_6 | arFIFOMap_15_count)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:131 assert (!resp_fire || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_arFIFOMap_0_T_30 | arFIFOMap_0_count_1)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:131 assert (!resp_fire || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_awFIFOMap_0_T_28 | awFIFOMap_0_count_1)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:131 assert (!resp_fire || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_arFIFOMap_1_T_30 | arFIFOMap_1_count_1)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:131 assert (!resp_fire || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_arFIFOMap_15_T_25 | ~arFIFOMap_1_count_1)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:132 assert (!req_fire  || count =/= flight.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_awFIFOMap_1_T_28 | awFIFOMap_1_count_1)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:131 assert (!resp_fire || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_awFIFOMap_15_T_24 | ~awFIFOMap_1_count_1)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:132 assert (!req_fire  || count =/= flight.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_arFIFOMap_2_T_30 | arFIFOMap_2_count_1)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:131 assert (!resp_fire || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_awFIFOMap_2_T_28 | awFIFOMap_2_count_1)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:131 assert (!resp_fire || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_arFIFOMap_3_T_30 | arFIFOMap_3_count_1)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:131 assert (!resp_fire || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_awFIFOMap_3_T_28 | awFIFOMap_3_count_1)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:131 assert (!resp_fire || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_arFIFOMap_4_T_30 | arFIFOMap_4_count_1)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:131 assert (!resp_fire || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_awFIFOMap_4_T_28 | awFIFOMap_4_count_1)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:131 assert (!resp_fire || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_arFIFOMap_5_T_30 | arFIFOMap_5_count_1)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:131 assert (!resp_fire || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_awFIFOMap_5_T_28 | awFIFOMap_5_count_1)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:131 assert (!resp_fire || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_arFIFOMap_6_T_30 | arFIFOMap_6_count_1)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:131 assert (!resp_fire || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_awFIFOMap_6_T_28 | awFIFOMap_6_count_1)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:131 assert (!resp_fire || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_arFIFOMap_7_T_30 | arFIFOMap_7_count_1)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:131 assert (!resp_fire || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_awFIFOMap_7_T_28 | awFIFOMap_7_count_1)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:131 assert (!resp_fire || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_arFIFOMap_8_T_30 | arFIFOMap_8_count_1)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:131 assert (!resp_fire || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_awFIFOMap_8_T_28 | awFIFOMap_8_count_1)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:131 assert (!resp_fire || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_arFIFOMap_9_T_30 | arFIFOMap_9_count_1)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:131 assert (!resp_fire || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_awFIFOMap_9_T_28 | awFIFOMap_9_count_1)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:131 assert (!resp_fire || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_arFIFOMap_10_T_30 | arFIFOMap_10_count_1)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:131 assert (!resp_fire || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_awFIFOMap_10_T_28 | awFIFOMap_10_count_1)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:131 assert (!resp_fire || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_arFIFOMap_11_T_30 | arFIFOMap_11_count_1)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:131 assert (!resp_fire || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_awFIFOMap_11_T_28 | awFIFOMap_11_count_1)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:131 assert (!resp_fire || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_arFIFOMap_12_T_30 | arFIFOMap_12_count_1)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:131 assert (!resp_fire || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_awFIFOMap_12_T_28 | awFIFOMap_12_count_1)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:131 assert (!resp_fire || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_arFIFOMap_13_T_30 | arFIFOMap_13_count_1)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:131 assert (!resp_fire || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_awFIFOMap_13_T_28 | awFIFOMap_13_count_1)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:131 assert (!resp_fire || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_arFIFOMap_14_T_30 | arFIFOMap_14_count_1)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:131 assert (!resp_fire || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_awFIFOMap_14_T_28 | awFIFOMap_14_count_1)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:131 assert (!resp_fire || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_arFIFOMap_15_T_30 | arFIFOMap_15_count_1)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:131 assert (!resp_fire || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_awFIFOMap_15_T_28 | awFIFOMap_15_count_1)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:131 assert (!resp_fire || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~portsAWOI_filtered_1_0_valid | awOut_0_io_enq_bits_winner_1)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:288 assert (!anyValid || winner.reduce(_||_))\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~winner_0 | ~winner_1)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:286 assert((prefixOR zip winner) map { case (p,w) => !p || !w } reduce {_ && _})\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~anyValid | winner_0 | winner_1)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:288 assert (!anyValid || winner.reduce(_||_))\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset
          & ~(~portsAWOI_filtered_1_1_valid | awOut_1_io_enq_bits_readys_readys[1]
              & portsAWOI_filtered_1_1_valid)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:288 assert (!anyValid || winner.reduce(_||_))\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~winner_1_0 | ~winner_1_1)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:286 assert((prefixOR zip winner) map { case (p,w) => !p || !w } reduce {_ && _})\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~anyValid_1 | winner_1_0 | winner_1_1)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:288 assert (!anyValid || winner.reduce(_||_))\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~portsAWOI_filtered_1_2_valid | awOut_2_io_enq_bits_winner_1)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:288 assert (!anyValid || winner.reduce(_||_))\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~winner_2_0 | ~winner_2_1)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:286 assert((prefixOR zip winner) map { case (p,w) => !p || !w } reduce {_ && _})\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~anyValid_2 | winner_2_0 | winner_2_1)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:288 assert (!anyValid || winner.reduce(_||_))\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~portsRIO_filtered_2_0_valid | winner_3_2)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:288 assert (!anyValid || winner.reduce(_||_))\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~winner_4_0 | ~winner_4_2)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:286 assert((prefixOR zip winner) map { case (p,w) => !p || !w } reduce {_ && _})\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~anyValid_4 | winner_4_0 | winner_4_2)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:288 assert (!anyValid || winner.reduce(_||_))\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~winner_5_1 | ~winner_5_2)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:286 assert((prefixOR zip winner) map { case (p,w) => !p || !w } reduce {_ && _})\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~anyValid_5 | winner_5_1 | winner_5_2)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:288 assert (!anyValid || winner.reduce(_||_))\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~winner_6_0 | ~winner_6_2)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:286 assert((prefixOR zip winner) map { case (p,w) => !p || !w } reduce {_ && _})\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~anyValid_6 | winner_6_0 | winner_6_2)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:288 assert (!anyValid || winner.reduce(_||_))\n");
        if (`STOP_COND_)
          $fatal;
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  reg        state_6_0;
  reg        state_6_2;
  assign allowed_6_0 = idle_6 ? readys_readys_6[0] : state_6_0;
  assign allowed_6_2 = idle_6 ? readys_readys_6[2] : state_6_2;
  assign in_1_bvalid =
    idle_6
      ? anyValid_6
      : state_6_0 & portsBIO_filtered_1_valid | state_6_2 & portsBIO_filtered_2_1_valid;
  assign _in_1_bT_9 =
    ((idle_6 ? winner_6_0 : state_6_0) ? auto_anon_out_0_bid[3:0] : 4'h0)
    | ((idle_6 ? winner_6_2 : state_6_2) ? auto_anon_out_2_bid[3:0] : 4'h0);
  wire [1:0] _awOut_0_io_enq_bits_readys_mask_T =
    awOut_0_io_enq_bits_readys_readys & awOut_0_io_enq_bits_readys_valid;
  wire [1:0] _readys_mask_T = readys_readys & readys_valid;
  wire [1:0] _awOut_1_io_enq_bits_readys_mask_T =
    awOut_1_io_enq_bits_readys_readys & awOut_1_io_enq_bits_readys_valid;
  wire [1:0] _readys_mask_T_5 = readys_readys_1 & readys_valid_1;
  wire [1:0] _awOut_2_io_enq_bits_readys_mask_T =
    awOut_2_io_enq_bits_readys_readys & awOut_2_io_enq_bits_readys_valid;
  wire [1:0] _readys_mask_T_10 = readys_readys_2 & readys_valid_2;
  wire [2:0] _readys_mask_T_15 = readys_readys_3 & readys_valid_3;
  wire [2:0] _readys_mask_T_18 = _readys_mask_T_15 | {_readys_mask_T_15[1:0], 1'h0};
  wire [2:0] _readys_mask_T_23 = readys_readys_4 & readys_valid_4;
  wire [2:0] _readys_mask_T_26 = _readys_mask_T_23 | {_readys_mask_T_23[1:0], 1'h0};
  wire [2:0] _readys_mask_T_31 = readys_readys_5 & readys_valid_5;
  wire [2:0] _readys_mask_T_34 = _readys_mask_T_31 | {_readys_mask_T_31[1:0], 1'h0};
  wire [2:0] _readys_mask_T_39 = readys_readys_6 & readys_valid_6;
  wire [2:0] _readys_mask_T_42 = _readys_mask_T_39 | {_readys_mask_T_39[1:0], 1'h0};
  wire       _awOut_0_io_enq_bits_T_16 = out_0_awready & out_0_awvalid;
  wire       _awOut_2_io_enq_bits_T_16 = out_2_awready & out_2_awvalid;
  always @(posedge clock) begin
    if (reset) begin
      arFIFOMap_0_count <= 1'h0;
      arFIFOMap_1_count <= 1'h0;
      arFIFOMap_2_count <= 1'h0;
      arFIFOMap_3_count <= 1'h0;
      arFIFOMap_4_count <= 1'h0;
      arFIFOMap_5_count <= 1'h0;
      arFIFOMap_6_count <= 1'h0;
      arFIFOMap_7_count <= 1'h0;
      arFIFOMap_8_count <= 1'h0;
      arFIFOMap_9_count <= 1'h0;
      arFIFOMap_10_count <= 1'h0;
      arFIFOMap_11_count <= 1'h0;
      arFIFOMap_12_count <= 1'h0;
      arFIFOMap_13_count <= 1'h0;
      arFIFOMap_14_count <= 1'h0;
      arFIFOMap_15_count <= 1'h0;
      arFIFOMap_0_count_1 <= 1'h0;
      awFIFOMap_0_count_1 <= 1'h0;
      arFIFOMap_1_count_1 <= 1'h0;
      awFIFOMap_1_count_1 <= 1'h0;
      arFIFOMap_2_count_1 <= 1'h0;
      awFIFOMap_2_count_1 <= 1'h0;
      arFIFOMap_3_count_1 <= 1'h0;
      awFIFOMap_3_count_1 <= 1'h0;
      arFIFOMap_4_count_1 <= 1'h0;
      awFIFOMap_4_count_1 <= 1'h0;
      arFIFOMap_5_count_1 <= 1'h0;
      awFIFOMap_5_count_1 <= 1'h0;
      arFIFOMap_6_count_1 <= 1'h0;
      awFIFOMap_6_count_1 <= 1'h0;
      arFIFOMap_7_count_1 <= 1'h0;
      awFIFOMap_7_count_1 <= 1'h0;
      arFIFOMap_8_count_1 <= 1'h0;
      awFIFOMap_8_count_1 <= 1'h0;
      arFIFOMap_9_count_1 <= 1'h0;
      awFIFOMap_9_count_1 <= 1'h0;
      arFIFOMap_10_count_1 <= 1'h0;
      awFIFOMap_10_count_1 <= 1'h0;
      arFIFOMap_11_count_1 <= 1'h0;
      awFIFOMap_11_count_1 <= 1'h0;
      arFIFOMap_12_count_1 <= 1'h0;
      awFIFOMap_12_count_1 <= 1'h0;
      arFIFOMap_13_count_1 <= 1'h0;
      awFIFOMap_13_count_1 <= 1'h0;
      arFIFOMap_14_count_1 <= 1'h0;
      awFIFOMap_14_count_1 <= 1'h0;
      arFIFOMap_15_count_1 <= 1'h0;
      awFIFOMap_15_count_1 <= 1'h0;
      latched_1 <= 1'h0;
      latched_2 <= 1'h0;
      latched_4 <= 1'h0;
      awOut_0_io_enq_bits_idle <= 1'h1;
      awOut_0_io_enq_bits_readys_mask <= 2'h3;
      awOut_0_io_enq_bits_state_1 <= 1'h0;
      idle <= 1'h1;
      readys_mask <= 2'h3;
      awOut_1_io_enq_bits_idle <= 1'h1;
      awOut_1_io_enq_bits_readys_mask <= 2'h3;
      idle_1 <= 1'h1;
      readys_mask_1 <= 2'h3;
      state_1_0 <= 1'h0;
      state_1_1 <= 1'h0;
      awOut_2_io_enq_bits_idle <= 1'h1;
      awOut_2_io_enq_bits_readys_mask <= 2'h3;
      awOut_2_io_enq_bits_state_1 <= 1'h0;
      idle_2 <= 1'h1;
      readys_mask_2 <= 2'h3;
      state_2_0 <= 1'h0;
      state_2_1 <= 1'h0;
      idle_3 <= 1'h1;
      readys_mask_3 <= 3'h7;
      state_3_2 <= 1'h0;
      idle_4 <= 1'h1;
      readys_mask_4 <= 3'h7;
      idle_5 <= 1'h1;
      readys_mask_5 <= 3'h7;
      state_5_1 <= 1'h0;
      state_5_2 <= 1'h0;
      idle_6 <= 1'h1;
      readys_mask_6 <= 3'h7;
      state_6_0 <= 1'h0;
      state_6_2 <= 1'h0;
    end
    else begin
      arFIFOMap_0_count <= arFIFOMap_0_count + _arFIFOMap_15_T_1 - _arFIFOMap_0_T_6;
      arFIFOMap_1_count <= arFIFOMap_1_count - _arFIFOMap_1_T_6;
      arFIFOMap_2_count <= arFIFOMap_2_count - _arFIFOMap_2_T_6;
      arFIFOMap_3_count <= arFIFOMap_3_count - _arFIFOMap_3_T_6;
      arFIFOMap_4_count <= arFIFOMap_4_count - _arFIFOMap_4_T_6;
      arFIFOMap_5_count <= arFIFOMap_5_count - _arFIFOMap_5_T_6;
      arFIFOMap_6_count <= arFIFOMap_6_count - _arFIFOMap_6_T_6;
      arFIFOMap_7_count <= arFIFOMap_7_count - _arFIFOMap_7_T_6;
      arFIFOMap_8_count <= arFIFOMap_8_count - _arFIFOMap_8_T_6;
      arFIFOMap_9_count <= arFIFOMap_9_count - _arFIFOMap_9_T_6;
      arFIFOMap_10_count <= arFIFOMap_10_count - _arFIFOMap_10_T_6;
      arFIFOMap_11_count <= arFIFOMap_11_count - _arFIFOMap_11_T_6;
      arFIFOMap_12_count <= arFIFOMap_12_count - _arFIFOMap_12_T_6;
      arFIFOMap_13_count <= arFIFOMap_13_count - _arFIFOMap_13_T_6;
      arFIFOMap_14_count <= arFIFOMap_14_count - _arFIFOMap_14_T_6;
      arFIFOMap_15_count <= arFIFOMap_15_count - _arFIFOMap_15_T_6;
      arFIFOMap_0_count_1 <= arFIFOMap_0_count_1 - _arFIFOMap_0_T_30;
      awFIFOMap_0_count_1 <= awFIFOMap_0_count_1 - _awFIFOMap_0_T_28;
      arFIFOMap_1_count_1 <= arFIFOMap_1_count_1 + _arFIFOMap_15_T_25 - _arFIFOMap_1_T_30;
      awFIFOMap_1_count_1 <= awFIFOMap_1_count_1 + _awFIFOMap_15_T_24 - _awFIFOMap_1_T_28;
      arFIFOMap_2_count_1 <= arFIFOMap_2_count_1 - _arFIFOMap_2_T_30;
      awFIFOMap_2_count_1 <= awFIFOMap_2_count_1 - _awFIFOMap_2_T_28;
      arFIFOMap_3_count_1 <= arFIFOMap_3_count_1 - _arFIFOMap_3_T_30;
      awFIFOMap_3_count_1 <= awFIFOMap_3_count_1 - _awFIFOMap_3_T_28;
      arFIFOMap_4_count_1 <= arFIFOMap_4_count_1 - _arFIFOMap_4_T_30;
      awFIFOMap_4_count_1 <= awFIFOMap_4_count_1 - _awFIFOMap_4_T_28;
      arFIFOMap_5_count_1 <= arFIFOMap_5_count_1 - _arFIFOMap_5_T_30;
      awFIFOMap_5_count_1 <= awFIFOMap_5_count_1 - _awFIFOMap_5_T_28;
      arFIFOMap_6_count_1 <= arFIFOMap_6_count_1 - _arFIFOMap_6_T_30;
      awFIFOMap_6_count_1 <= awFIFOMap_6_count_1 - _awFIFOMap_6_T_28;
      arFIFOMap_7_count_1 <= arFIFOMap_7_count_1 - _arFIFOMap_7_T_30;
      awFIFOMap_7_count_1 <= awFIFOMap_7_count_1 - _awFIFOMap_7_T_28;
      arFIFOMap_8_count_1 <= arFIFOMap_8_count_1 - _arFIFOMap_8_T_30;
      awFIFOMap_8_count_1 <= awFIFOMap_8_count_1 - _awFIFOMap_8_T_28;
      arFIFOMap_9_count_1 <= arFIFOMap_9_count_1 - _arFIFOMap_9_T_30;
      awFIFOMap_9_count_1 <= awFIFOMap_9_count_1 - _awFIFOMap_9_T_28;
      arFIFOMap_10_count_1 <= arFIFOMap_10_count_1 - _arFIFOMap_10_T_30;
      awFIFOMap_10_count_1 <= awFIFOMap_10_count_1 - _awFIFOMap_10_T_28;
      arFIFOMap_11_count_1 <= arFIFOMap_11_count_1 - _arFIFOMap_11_T_30;
      awFIFOMap_11_count_1 <= awFIFOMap_11_count_1 - _awFIFOMap_11_T_28;
      arFIFOMap_12_count_1 <= arFIFOMap_12_count_1 - _arFIFOMap_12_T_30;
      awFIFOMap_12_count_1 <= awFIFOMap_12_count_1 - _awFIFOMap_12_T_28;
      arFIFOMap_13_count_1 <= arFIFOMap_13_count_1 - _arFIFOMap_13_T_30;
      awFIFOMap_13_count_1 <= awFIFOMap_13_count_1 - _awFIFOMap_13_T_28;
      arFIFOMap_14_count_1 <= arFIFOMap_14_count_1 - _arFIFOMap_14_T_30;
      awFIFOMap_14_count_1 <= awFIFOMap_14_count_1 - _awFIFOMap_14_T_28;
      arFIFOMap_15_count_1 <= arFIFOMap_15_count_1 - _arFIFOMap_15_T_30;
      awFIFOMap_15_count_1 <= awFIFOMap_15_count_1 - _awFIFOMap_15_T_28;
      latched_1 <=
        ~(_portsAWOI_in_1_awready_T_4 & in_1_awvalid)
        & (_awIn_1_io_enq_ready & awIn_1_io_enq_valid | latched_1);
      latched_2 <=
        ~_awOut_0_io_enq_bits_T_16
        & (_awOut_0_io_enq_ready & awOut_0_io_enq_valid | latched_2);
      latched_4 <=
        ~_awOut_2_io_enq_bits_T_16
        & (_awOut_2_io_enq_ready & awOut_2_io_enq_valid | latched_4);
      awOut_0_io_enq_bits_idle <=
        _awOut_0_io_enq_bits_T_16 | ~portsAWOI_filtered_1_0_valid
        & awOut_0_io_enq_bits_idle;
      if (awOut_0_io_enq_bits_idle & portsAWOI_filtered_1_0_valid)
        awOut_0_io_enq_bits_readys_mask <=
          _awOut_0_io_enq_bits_readys_mask_T
          | {_awOut_0_io_enq_bits_readys_mask_T[0], 1'h0};
      if (awOut_0_io_enq_bits_idle)
        awOut_0_io_enq_bits_state_1 <= awOut_0_io_enq_bits_winner_1;
      idle <= ~anyValid & idle;
      if (idle & (|readys_valid))
        readys_mask <= _readys_mask_T | {_readys_mask_T[0], 1'h0};
      awOut_1_io_enq_bits_idle <=
        ~portsAWOI_filtered_1_1_valid & awOut_1_io_enq_bits_idle;
      if (awOut_1_io_enq_bits_idle & portsAWOI_filtered_1_1_valid)
        awOut_1_io_enq_bits_readys_mask <=
          _awOut_1_io_enq_bits_readys_mask_T
          | {_awOut_1_io_enq_bits_readys_mask_T[0], 1'h0};
      idle_1 <= auto_anon_out_1_arready & out_1_arvalid | ~anyValid_1 & idle_1;
      if (idle_1 & (|readys_valid_1))
        readys_mask_1 <= _readys_mask_T_5 | {_readys_mask_T_5[0], 1'h0};
      if (idle_1) begin
        state_1_0 <= winner_1_0;
        state_1_1 <= winner_1_1;
      end
      awOut_2_io_enq_bits_idle <=
        _awOut_2_io_enq_bits_T_16 | ~portsAWOI_filtered_1_2_valid
        & awOut_2_io_enq_bits_idle;
      if (awOut_2_io_enq_bits_idle & portsAWOI_filtered_1_2_valid)
        awOut_2_io_enq_bits_readys_mask <=
          _awOut_2_io_enq_bits_readys_mask_T
          | {_awOut_2_io_enq_bits_readys_mask_T[0], 1'h0};
      if (awOut_2_io_enq_bits_idle)
        awOut_2_io_enq_bits_state_1 <= awOut_2_io_enq_bits_winner_1;
      idle_2 <= auto_anon_out_2_arready & out_2_arvalid | ~anyValid_2 & idle_2;
      if (idle_2 & (|readys_valid_2))
        readys_mask_2 <= _readys_mask_T_10 | {_readys_mask_T_10[0], 1'h0};
      if (idle_2) begin
        state_2_0 <= winner_2_0;
        state_2_1 <= winner_2_1;
      end
      idle_3 <=
        auto_anon_in_0_rready & in_0_rvalid | ~portsRIO_filtered_2_0_valid & idle_3;
      if (idle_3 & portsRIO_filtered_2_0_valid)
        readys_mask_3 <= _readys_mask_T_18 | {_readys_mask_T_18[0], 2'h0};
      if (idle_3)
        state_3_2 <= winner_3_2;
      idle_4 <= ~anyValid_4 & idle_4;
      if (idle_4 & (|{portsBIO_filtered_2_0_valid, portsBIO_filtered_0_valid}))
        readys_mask_4 <= _readys_mask_T_26 | {_readys_mask_T_26[0], 2'h0};
      idle_5 <= auto_anon_in_1_rready & in_1_rvalid | ~anyValid_5 & idle_5;
      if (idle_5 & (|{portsRIO_filtered_2_1_valid, auto_anon_out_1_rvalid}))
        readys_mask_5 <= _readys_mask_T_34 | {_readys_mask_T_34[0], 2'h0};
      if (idle_5) begin
        state_5_1 <= winner_5_1;
        state_5_2 <= winner_5_2;
      end
      idle_6 <= auto_anon_in_1_bready & in_1_bvalid | ~anyValid_6 & idle_6;
      if (idle_6 & (|{portsBIO_filtered_2_1_valid, portsBIO_filtered_1_valid}))
        readys_mask_6 <= _readys_mask_T_42 | {_readys_mask_T_42[0], 2'h0};
      if (idle_6) begin
        state_6_0 <= winner_6_0;
        state_6_2 <= winner_6_2;
      end
    end
  end // always @(posedge)
  Queue1_UInt3 awIn_1 (
    .clock        (clock),
    .reset        (reset),
    .io_enq_ready (_awIn_1_io_enq_ready),
    .io_enq_valid (awIn_1_io_enq_valid),
    .io_enq_bits  ({requestAWIO_1_2, requestAWIO_1_1, requestAWIO_1_0}),
    .io_deq_ready (auto_anon_in_1_wvalid & _portsWOI_in_1_wready_T_4),
    .io_deq_valid (_awIn_1_io_deq_valid),
    .io_deq_bits  (_awIn_1_io_deq_bits)
  );
  Queue1_UInt2 awOut_0 (
    .clock        (clock),
    .reset        (reset),
    .io_enq_ready (_awOut_0_io_enq_ready),
    .io_enq_valid (awOut_0_io_enq_valid),
    .io_enq_bits  ({awOut_0_io_enq_bits_muxState_1, 1'h0}),
    .io_deq_ready (_out_0_wvalid_T_3 & _out_0_wT_4 & auto_anon_out_0_wready),
    .io_deq_valid (_awOut_0_io_deq_valid),
    .io_deq_bits  (_awOut_0_io_deq_bits)
  );
  Queue1_UInt2 awOut_2 (
    .clock        (clock),
    .reset        (reset),
    .io_enq_ready (_awOut_2_io_enq_ready),
    .io_enq_valid (awOut_2_io_enq_valid),
    .io_enq_bits  ({awOut_2_io_enq_bits_muxState_1, 1'h0}),
    .io_deq_ready (_out_2_wvalid_T_3 & _out_2_wT_4 & auto_anon_out_2_wready),
    .io_deq_valid (_awOut_2_io_deq_valid),
    .io_deq_bits  (_awOut_2_io_deq_bits)
  );
  assign auto_anon_in_1_awready = anonIn_1_awready;
  assign auto_anon_in_1_wready = _portsWOI_in_1_wready_T_4 & _awIn_1_io_deq_valid;
  assign auto_anon_in_1_bvalid = in_1_bvalid;
  assign auto_anon_in_1_arready = anonIn_1_arready;
  assign auto_anon_in_1_rvalid = in_1_rvalid;
  assign auto_anon_in_1_rdata =
    (muxState_5_1 ? auto_anon_out_1_rdata : 32'h0)
    | (muxState_5_2 ? auto_anon_out_2_rdata : 32'h0);
  assign auto_anon_in_0_arready = anonIn_arready;
  assign auto_anon_in_0_rvalid = in_0_rvalid;
  assign auto_anon_in_0_rdata = muxState_3_2 ? auto_anon_out_2_rdata : 32'h0;
  assign auto_anon_out_2_awvalid = out_2_awvalid & _out_2_awready_T;
  assign auto_anon_out_2_awid = {4'h0, awOut_2_io_enq_bits_muxState_1};
  assign auto_anon_out_2_awaddr =
    awOut_2_io_enq_bits_muxState_1 ? auto_anon_in_1_awaddr : 32'h0;
  assign auto_anon_out_2_wvalid = _out_2_wvalid_T_3 & _awOut_2_io_deq_valid;
  assign auto_anon_out_2_wdata =
    _filtered_2_ready_T_4 ? auto_anon_in_1_wdata : 32'h0;
  assign auto_anon_out_2_wstrb =
    _filtered_2_ready_T_4 ? auto_anon_in_1_wstrb : 4'h0;
  assign auto_anon_out_2_bready =
    ~(auto_anon_out_2_bid[4]) & auto_anon_in_1_bready & allowed_6_2;
  assign auto_anon_out_2_arvalid = out_2_arvalid;
  assign auto_anon_out_2_arid = {muxState_2_0, 3'h0, muxState_2_1};
  assign auto_anon_out_2_araddr =
    (muxState_2_0 ? auto_anon_in_0_araddr : 32'h0)
    | (muxState_2_1 ? auto_anon_in_1_araddr : 32'h0);
  assign auto_anon_out_2_arlen = muxState_2_0 ? auto_anon_in_0_arlen : 8'h0;
  assign auto_anon_out_2_rready =
    auto_anon_out_2_rid[4] & auto_anon_in_0_rready & allowed_3_2
    | ~(auto_anon_out_2_rid[4]) & auto_anon_in_1_rready & allowed_5_2;
  assign auto_anon_out_1_arvalid = out_1_arvalid;
  assign auto_anon_out_1_araddr =
    ((idle_1 ? winner_1_0 : state_1_0) ? auto_anon_in_0_araddr : 32'h0)
    | ((idle_1 ? winner_1_1 : state_1_1) ? auto_anon_in_1_araddr : 32'h0);
  assign auto_anon_out_1_rready =
    auto_anon_in_1_rready & (idle_5 ? readys_readys_5[1] : state_5_1);
  assign auto_anon_out_0_awvalid = out_0_awvalid & _out_0_awready_T;
  assign auto_anon_out_0_awid = {4'h0, awOut_0_io_enq_bits_muxState_1};
  assign auto_anon_out_0_wvalid = _out_0_wvalid_T_3 & _awOut_0_io_deq_valid;
  assign auto_anon_out_0_wdata =
    _filtered_0_ready_T_4 ? auto_anon_in_1_wdata : 32'h0;
  assign auto_anon_out_0_bready =
    ~(auto_anon_out_0_bid[4]) & auto_anon_in_1_bready & allowed_6_0;
endmodule

// external module UART_bridge

module UART(
  input         clock,
                reset,
  output        auto_in_awready,
  input         auto_in_awvalid,
  input  [4:0]  auto_in_awid,
  output        auto_in_wready,
  input         auto_in_wvalid,
  input  [31:0] auto_in_wdata,
  input         auto_in_bready,
  output        auto_in_bvalid,
  output [4:0]  auto_in_bid
);

  reg  [4:0]  nodeIn_bid_r;
  reg  [1:0]  state_w;
  reg  [1:0]  state_cache;
  wire        nodeIn_awready = state_w == 2'h0;
  wire        nodeIn_wready = state_w == 2'h1;
  wire        nodeIn_bvalid = state_w == 2'h2;
  reg  [31:0] Uart_bridge_io_data_r;
  wire        _state_wT = nodeIn_awready & auto_in_awvalid;
  wire        _Uart_bridge_io_data_T = nodeIn_wready & auto_in_wvalid;
  always @(posedge clock) begin
    if (_state_wT)
      nodeIn_bid_r <= auto_in_awid;
    if (_Uart_bridge_io_data_T)
      Uart_bridge_io_data_r <= auto_in_wdata;
    if (reset) begin
      state_w <= 2'h0;
      state_cache <= 2'h0;
    end
    else begin
      if (nodeIn_bvalid)
        state_w <= {~(auto_in_bready & nodeIn_bvalid), 1'h0};
      else if (nodeIn_wready) begin
        if (_Uart_bridge_io_data_T)
          state_w <= 2'h2;
        else
          state_w <= 2'h1;
      end
      else
        state_w <= {1'h0, nodeIn_awready & _state_wT};
      state_cache <= state_w;
    end
  end // always @(posedge)
  UART_bridge Uart_bridge (
    .clock (clock),
    .valid (state_cache != 2'h2 & nodeIn_bvalid),
    .data  (Uart_bridge_io_data_r[7:0])
  );
  assign auto_in_awready = nodeIn_awready;
  assign auto_in_wready = nodeIn_wready;
  assign auto_in_bvalid = nodeIn_bvalid;
  assign auto_in_bid = nodeIn_bid_r;
endmodule

module CLINT(
  input         clock,
                reset,
  output        auto_in_arready,
  input         auto_in_arvalid,
  input  [31:0] auto_in_araddr,
  input         auto_in_rready,
  output        auto_in_rvalid,
  output [31:0] auto_in_rdata
);

  reg        state;
  reg [63:0] mtime;
  reg [9:0]  m_counter;
  reg [3:0]  addr;
  always @(posedge clock) begin
    if (reset) begin
      state <= 1'h0;
      mtime <= 64'h0;
      m_counter <= 10'h0;
    end
    else begin
      if (state)
        state <= ~auto_in_rready;
      else
        state <= auto_in_arvalid;
      if (m_counter == 10'h3D9) begin
        mtime <= mtime + 64'h1;
        m_counter <= 10'h0;
      end
      else
        m_counter <= m_counter + 10'h1;
    end
    if (~state & auto_in_arvalid)
      addr <= auto_in_araddr[3:0];
  end // always @(posedge)
  assign auto_in_arready = ~state;
  assign auto_in_rvalid = state;
  assign auto_in_rdata =
    addr == 4'hC ? mtime[63:32] : addr == 4'h8 ? mtime[31:0] : 32'h0;
endmodule

// external module sram_bridge

module SRAM(
  input         clock,
                reset,
  output        auto_in_awready,
  input         auto_in_awvalid,
  input  [4:0]  auto_in_awid,
  input  [31:0] auto_in_awaddr,
  output        auto_in_wready,
  input         auto_in_wvalid,
  input  [31:0] auto_in_wdata,
  input  [3:0]  auto_in_wstrb,
  input         auto_in_bready,
  output        auto_in_bvalid,
  output [4:0]  auto_in_bid,
  output        auto_in_arready,
  input         auto_in_arvalid,
  input  [4:0]  auto_in_arid,
  input  [31:0] auto_in_araddr,
  input  [7:0]  auto_in_arlen,
  input         auto_in_rready,
  output        auto_in_rvalid,
  output [4:0]  auto_in_rid,
  output [31:0] auto_in_rdata,
  output        auto_in_rlast
);

  wire        nodeIn_arready;
  wire        _bridge_io_raddr_T = nodeIn_arready & auto_in_arvalid;
  reg  [4:0]  nodeIn_rid_r;
  reg  [4:0]  nodeIn_bid_r;
  reg  [1:0]  state_r;
  reg  [1:0]  state_w;
  reg  [7:0]  read_burst_counter;
  reg  [7:0]  write_burst_counter;
  reg  [31:0] read_addr;
  wire        nodeIn_rlast = read_burst_counter == 8'h0;
  assign nodeIn_arready = state_r == 2'h0;
  wire        nodeIn_rvalid = state_r == 2'h1;
  wire        nodeIn_awready = state_w == 2'h0;
  wire        nodeIn_wready = state_w == 2'h1;
  wire        nodeIn_bvalid = state_w == 2'h2;
  reg  [31:0] bridge_io_waddr_r;
  wire        _bridge_io_waddr_T = nodeIn_awready & auto_in_awvalid;
  always @(posedge clock) begin
    if (_bridge_io_raddr_T)
      nodeIn_rid_r <= auto_in_arid;
    if (_bridge_io_waddr_T) begin
      nodeIn_bid_r <= auto_in_awid;
      bridge_io_waddr_r <= auto_in_awaddr;
    end
    if (auto_in_rready & nodeIn_rvalid) begin
      read_burst_counter <= read_burst_counter - 8'h1;
      read_addr <= read_addr + 32'h4;
    end
    else if (_bridge_io_raddr_T) begin
      read_burst_counter <= auto_in_arlen;
      read_addr <= auto_in_araddr + 32'h4;
    end
    if (nodeIn_wready & auto_in_wvalid)
      write_burst_counter <= write_burst_counter - 8'h1;
    else if (_bridge_io_waddr_T)
      write_burst_counter <= 8'h0;
    if (reset) begin
      state_r <= 2'h0;
      state_w <= 2'h0;
    end
    else begin
      state_r <=
        {1'h0, nodeIn_rvalid ? ~nodeIn_rlast : nodeIn_arready & auto_in_arvalid};
      if (nodeIn_bvalid)
        state_w <= {~(auto_in_bready & nodeIn_bvalid), 1'h0};
      else if (nodeIn_wready)
        state_w <= write_burst_counter == 8'h0 ? 2'h2 : 2'h1;
      else
        state_w <= {1'h0, nodeIn_awready & _bridge_io_waddr_T};
    end
  end // always @(posedge)
  sram_bridge bridge (
    .clock  (clock),
    .read   (nodeIn_rvalid | _bridge_io_raddr_T),
    .r_addr (_bridge_io_raddr_T ? auto_in_araddr : read_addr),
    .r_data (auto_in_rdata),
    .write  (nodeIn_wready),
    .w_addr (bridge_io_waddr_r),
    .w_data (auto_in_wdata),
    .w_strb (auto_in_wstrb)
  );
  assign auto_in_awready = nodeIn_awready;
  assign auto_in_wready = nodeIn_wready;
  assign auto_in_bvalid = nodeIn_bvalid;
  assign auto_in_bid = nodeIn_bid_r;
  assign auto_in_arready = nodeIn_arready;
  assign auto_in_rvalid = nodeIn_rvalid;
  assign auto_in_rid = nodeIn_rid_r;
  assign auto_in_rlast = nodeIn_rlast;
endmodule

// external module IDU_catch

module IDU(
  input         clock,
                reset,
  output        io_IFU_2_IDU_ready,
  input         io_IFU_2_IDU_valid,
  input  [31:0] io_IFU_2_IDU_bits_data,
                io_IFU_2_IDU_bits_PC,
                io_REG_2_IDU_CSR_rdata,
                io_REG_2_IDU_GPR_Adata,
                io_REG_2_IDU_GPR_Bdata,
  input         io_IDU_2_EXU_ready,
  output        io_IDU_2_EXU_valid,
  output [2:0]  io_IDU_2_EXU_bits_Branch,
                io_IDU_2_EXU_bits_MemOp,
  output [31:0] io_IDU_2_EXU_bits_EXU_A,
                io_IDU_2_EXU_bits_EXU_B,
  output [3:0]  io_IDU_2_EXU_bits_EXUctr,
  output [1:0]  io_IDU_2_EXU_bits_csr_ctr,
  output [31:0] io_IDU_2_EXU_bits_Imm,
  output [3:0]  io_IDU_2_EXU_bits_GPR_waddr,
  output [31:0] io_IDU_2_EXU_bits_PC,
  output [4:0]  io_IDU_2_REG_GPR_Aaddr,
                io_IDU_2_REG_GPR_Baddr,
  output [11:0] io_IDU_2_REG_CSR_raddr
);

  wire [29:0] rvdecoderResult_invInputs = ~(io_IFU_2_IDU_bits_data[31:2]);
  wire [7:0]  _rvdecoderResult_andMatrixOutputs_T =
    {io_IFU_2_IDU_bits_data[0],
     io_IFU_2_IDU_bits_data[1],
     rvdecoderResult_invInputs[0],
     rvdecoderResult_invInputs[1],
     rvdecoderResult_invInputs[2],
     rvdecoderResult_invInputs[3],
     rvdecoderResult_invInputs[4],
     rvdecoderResult_invInputs[11]};
  wire [7:0]  _rvdecoderResult_andMatrixOutputs_T_1 =
    {io_IFU_2_IDU_bits_data[0],
     io_IFU_2_IDU_bits_data[1],
     rvdecoderResult_invInputs[0],
     rvdecoderResult_invInputs[1],
     rvdecoderResult_invInputs[3],
     rvdecoderResult_invInputs[4],
     rvdecoderResult_invInputs[10],
     rvdecoderResult_invInputs[11]};
  wire [7:0]  _rvdecoderResult_andMatrixOutputs_T_2 =
    {io_IFU_2_IDU_bits_data[0],
     io_IFU_2_IDU_bits_data[1],
     rvdecoderResult_invInputs[0],
     rvdecoderResult_invInputs[1],
     rvdecoderResult_invInputs[2],
     rvdecoderResult_invInputs[4],
     rvdecoderResult_invInputs[10],
     rvdecoderResult_invInputs[12]};
  wire [7:0]  _rvdecoderResult_andMatrixOutputs_T_3 =
    {io_IFU_2_IDU_bits_data[0],
     io_IFU_2_IDU_bits_data[1],
     rvdecoderResult_invInputs[0],
     rvdecoderResult_invInputs[1],
     rvdecoderResult_invInputs[3],
     rvdecoderResult_invInputs[4],
     rvdecoderResult_invInputs[10],
     rvdecoderResult_invInputs[12]};
  wire [7:0]  _rvdecoderResult_andMatrixOutputs_T_4 =
    {io_IFU_2_IDU_bits_data[0],
     io_IFU_2_IDU_bits_data[1],
     rvdecoderResult_invInputs[0],
     rvdecoderResult_invInputs[1],
     rvdecoderResult_invInputs[2],
     rvdecoderResult_invInputs[4],
     rvdecoderResult_invInputs[11],
     rvdecoderResult_invInputs[12]};
  wire [5:0]  _rvdecoderResult_andMatrixOutputs_T_5 =
    {io_IFU_2_IDU_bits_data[0],
     io_IFU_2_IDU_bits_data[1],
     io_IFU_2_IDU_bits_data[2],
     rvdecoderResult_invInputs[1],
     io_IFU_2_IDU_bits_data[4],
     rvdecoderResult_invInputs[4]};
  wire [8:0]  _rvdecoderResult_andMatrixOutputs_T_7 =
    {io_IFU_2_IDU_bits_data[0],
     io_IFU_2_IDU_bits_data[1],
     rvdecoderResult_invInputs[0],
     rvdecoderResult_invInputs[1],
     rvdecoderResult_invInputs[2],
     io_IFU_2_IDU_bits_data[5],
     rvdecoderResult_invInputs[4],
     rvdecoderResult_invInputs[10],
     rvdecoderResult_invInputs[12]};
  wire [7:0]  _rvdecoderResult_andMatrixOutputs_T_8 =
    {io_IFU_2_IDU_bits_data[0],
     io_IFU_2_IDU_bits_data[1],
     rvdecoderResult_invInputs[0],
     rvdecoderResult_invInputs[1],
     rvdecoderResult_invInputs[2],
     io_IFU_2_IDU_bits_data[5],
     rvdecoderResult_invInputs[11],
     rvdecoderResult_invInputs[12]};
  wire [6:0]  _rvdecoderResult_andMatrixOutputs_T_11 =
    {io_IFU_2_IDU_bits_data[0],
     io_IFU_2_IDU_bits_data[1],
     io_IFU_2_IDU_bits_data[2],
     rvdecoderResult_invInputs[1],
     io_IFU_2_IDU_bits_data[4],
     io_IFU_2_IDU_bits_data[5],
     rvdecoderResult_invInputs[4]};
  wire [7:0]  _rvdecoderResult_andMatrixOutputs_T_12 =
    {io_IFU_2_IDU_bits_data[0],
     io_IFU_2_IDU_bits_data[1],
     rvdecoderResult_invInputs[0],
     rvdecoderResult_invInputs[1],
     rvdecoderResult_invInputs[2],
     io_IFU_2_IDU_bits_data[5],
     io_IFU_2_IDU_bits_data[6],
     rvdecoderResult_invInputs[11]};
  wire [9:0]  _rvdecoderResult_andMatrixOutputs_T_15 =
    {io_IFU_2_IDU_bits_data[0],
     io_IFU_2_IDU_bits_data[1],
     io_IFU_2_IDU_bits_data[2],
     rvdecoderResult_invInputs[1],
     rvdecoderResult_invInputs[2],
     io_IFU_2_IDU_bits_data[5],
     io_IFU_2_IDU_bits_data[6],
     rvdecoderResult_invInputs[10],
     rvdecoderResult_invInputs[11],
     rvdecoderResult_invInputs[12]};
  wire [6:0]  _rvdecoderResult_andMatrixOutputs_T_16 =
    {io_IFU_2_IDU_bits_data[0],
     io_IFU_2_IDU_bits_data[1],
     io_IFU_2_IDU_bits_data[2],
     io_IFU_2_IDU_bits_data[3],
     rvdecoderResult_invInputs[2],
     io_IFU_2_IDU_bits_data[5],
     io_IFU_2_IDU_bits_data[6]};
  wire [27:0] _rvdecoderResult_andMatrixOutputs_T_17 =
    {io_IFU_2_IDU_bits_data[4],
     io_IFU_2_IDU_bits_data[5],
     io_IFU_2_IDU_bits_data[6],
     rvdecoderResult_invInputs[5],
     rvdecoderResult_invInputs[6],
     rvdecoderResult_invInputs[7],
     rvdecoderResult_invInputs[8],
     rvdecoderResult_invInputs[9],
     rvdecoderResult_invInputs[10],
     rvdecoderResult_invInputs[11],
     rvdecoderResult_invInputs[12],
     rvdecoderResult_invInputs[13],
     rvdecoderResult_invInputs[14],
     rvdecoderResult_invInputs[15],
     rvdecoderResult_invInputs[16],
     rvdecoderResult_invInputs[17],
     rvdecoderResult_invInputs[18],
     rvdecoderResult_invInputs[19],
     rvdecoderResult_invInputs[20],
     rvdecoderResult_invInputs[21],
     rvdecoderResult_invInputs[22],
     rvdecoderResult_invInputs[23],
     rvdecoderResult_invInputs[24],
     rvdecoderResult_invInputs[25],
     rvdecoderResult_invInputs[26],
     rvdecoderResult_invInputs[27],
     rvdecoderResult_invInputs[28],
     rvdecoderResult_invInputs[29]};
  wire [9:0]  _rvdecoderResult_andMatrixOutputs_T_20 =
    {io_IFU_2_IDU_bits_data[0],
     io_IFU_2_IDU_bits_data[1],
     io_IFU_2_IDU_bits_data[2],
     io_IFU_2_IDU_bits_data[3],
     rvdecoderResult_invInputs[2],
     rvdecoderResult_invInputs[3],
     rvdecoderResult_invInputs[4],
     io_IFU_2_IDU_bits_data[12],
     rvdecoderResult_invInputs[11],
     rvdecoderResult_invInputs[12]};
  wire [14:0] _rvdecoderResult_andMatrixOutputs_T_21 =
    {io_IFU_2_IDU_bits_data[0],
     io_IFU_2_IDU_bits_data[1],
     rvdecoderResult_invInputs[0],
     rvdecoderResult_invInputs[1],
     io_IFU_2_IDU_bits_data[4],
     rvdecoderResult_invInputs[4],
     io_IFU_2_IDU_bits_data[12],
     rvdecoderResult_invInputs[11],
     rvdecoderResult_invInputs[23],
     rvdecoderResult_invInputs[24],
     rvdecoderResult_invInputs[25],
     rvdecoderResult_invInputs[26],
     rvdecoderResult_invInputs[27],
     rvdecoderResult_invInputs[28],
     rvdecoderResult_invInputs[29]};
  wire [7:0]  _rvdecoderResult_andMatrixOutputs_T_24 =
    {io_IFU_2_IDU_bits_data[0],
     io_IFU_2_IDU_bits_data[1],
     rvdecoderResult_invInputs[0],
     rvdecoderResult_invInputs[1],
     io_IFU_2_IDU_bits_data[4],
     io_IFU_2_IDU_bits_data[5],
     io_IFU_2_IDU_bits_data[6],
     io_IFU_2_IDU_bits_data[12]};
  wire [7:0]  _rvdecoderResult_andMatrixOutputs_T_27 =
    {io_IFU_2_IDU_bits_data[0],
     io_IFU_2_IDU_bits_data[1],
     rvdecoderResult_invInputs[0],
     rvdecoderResult_invInputs[1],
     io_IFU_2_IDU_bits_data[4],
     rvdecoderResult_invInputs[3],
     rvdecoderResult_invInputs[4],
     io_IFU_2_IDU_bits_data[13]};
  wire [7:0]  _rvdecoderResult_andMatrixOutputs_T_31 =
    {io_IFU_2_IDU_bits_data[0],
     io_IFU_2_IDU_bits_data[1],
     rvdecoderResult_invInputs[0],
     rvdecoderResult_invInputs[1],
     io_IFU_2_IDU_bits_data[4],
     io_IFU_2_IDU_bits_data[5],
     io_IFU_2_IDU_bits_data[6],
     io_IFU_2_IDU_bits_data[13]};
  wire [9:0]  _rvdecoderResult_andMatrixOutputs_T_32 =
    {io_IFU_2_IDU_bits_data[0],
     io_IFU_2_IDU_bits_data[1],
     rvdecoderResult_invInputs[0],
     rvdecoderResult_invInputs[1],
     io_IFU_2_IDU_bits_data[4],
     io_IFU_2_IDU_bits_data[5],
     io_IFU_2_IDU_bits_data[6],
     rvdecoderResult_invInputs[10],
     io_IFU_2_IDU_bits_data[13],
     rvdecoderResult_invInputs[12]};
  wire [7:0]  _rvdecoderResult_andMatrixOutputs_T_37 =
    {io_IFU_2_IDU_bits_data[0],
     io_IFU_2_IDU_bits_data[1],
     rvdecoderResult_invInputs[0],
     rvdecoderResult_invInputs[1],
     rvdecoderResult_invInputs[2],
     io_IFU_2_IDU_bits_data[5],
     io_IFU_2_IDU_bits_data[6],
     io_IFU_2_IDU_bits_data[14]};
  wire [27:0] _rvdecoderResult_andMatrixOutputs_T_47 =
    {io_IFU_2_IDU_bits_data[4],
     io_IFU_2_IDU_bits_data[5],
     io_IFU_2_IDU_bits_data[6],
     rvdecoderResult_invInputs[5],
     rvdecoderResult_invInputs[6],
     rvdecoderResult_invInputs[7],
     rvdecoderResult_invInputs[8],
     rvdecoderResult_invInputs[9],
     rvdecoderResult_invInputs[10],
     rvdecoderResult_invInputs[11],
     rvdecoderResult_invInputs[12],
     rvdecoderResult_invInputs[13],
     rvdecoderResult_invInputs[14],
     rvdecoderResult_invInputs[15],
     rvdecoderResult_invInputs[16],
     rvdecoderResult_invInputs[17],
     rvdecoderResult_invInputs[18],
     io_IFU_2_IDU_bits_data[21],
     rvdecoderResult_invInputs[20],
     rvdecoderResult_invInputs[21],
     rvdecoderResult_invInputs[22],
     rvdecoderResult_invInputs[23],
     rvdecoderResult_invInputs[24],
     rvdecoderResult_invInputs[25],
     io_IFU_2_IDU_bits_data[28],
     io_IFU_2_IDU_bits_data[29],
     rvdecoderResult_invInputs[28],
     rvdecoderResult_invInputs[29]};
  wire [1:0]  _rvdecoderResult_T_6 =
    {|{&_rvdecoderResult_andMatrixOutputs_T_17,
       &_rvdecoderResult_andMatrixOutputs_T_24,
       &_rvdecoderResult_andMatrixOutputs_T_31},
     |{&_rvdecoderResult_andMatrixOutputs_T_17, &_rvdecoderResult_andMatrixOutputs_T_47}};
  wire [4:0]  catchResult_invInputs = ~(io_IFU_2_IDU_bits_data[6:2]);
  reg  [32:0] casez_tmp;
  always_comb begin
    casez ({&_rvdecoderResult_andMatrixOutputs_T_16,
            |{&_rvdecoderResult_andMatrixOutputs_T_7,
              &_rvdecoderResult_andMatrixOutputs_T_8,
              &_rvdecoderResult_andMatrixOutputs_T_37},
            |{&_rvdecoderResult_andMatrixOutputs_T_5,
              &_rvdecoderResult_andMatrixOutputs_T_12,
              &_rvdecoderResult_andMatrixOutputs_T_37}})
      3'b000:
        casez_tmp = {{21{io_IFU_2_IDU_bits_data[31]}}, io_IFU_2_IDU_bits_data[31:20]};
      3'b001:
        casez_tmp = {1'h0, io_IFU_2_IDU_bits_data[31:12], 12'h0};
      3'b010:
        casez_tmp =
          {1'h0,
           {20{io_IFU_2_IDU_bits_data[31]}},
           io_IFU_2_IDU_bits_data[31:25],
           io_IFU_2_IDU_bits_data[11:7]};
      3'b011:
        casez_tmp =
          {1'h0,
           {20{io_IFU_2_IDU_bits_data[31]}},
           io_IFU_2_IDU_bits_data[7],
           io_IFU_2_IDU_bits_data[30:25],
           io_IFU_2_IDU_bits_data[11:8],
           1'h0};
      3'b100:
        casez_tmp =
          {1'h0,
           {12{io_IFU_2_IDU_bits_data[31]}},
           io_IFU_2_IDU_bits_data[19:12],
           io_IFU_2_IDU_bits_data[20],
           io_IFU_2_IDU_bits_data[30:21],
           1'h0};
      3'b101:
        casez_tmp = 33'h0;
      3'b110:
        casez_tmp = 33'h0;
      default:
        casez_tmp = 33'h0;
    endcase
  end // always_comb
  reg  [31:0] casez_tmp_0;
  always_comb begin
    casez ({|{&_rvdecoderResult_andMatrixOutputs_T_17,
              &_rvdecoderResult_andMatrixOutputs_T_24,
              &_rvdecoderResult_andMatrixOutputs_T_31,
              &_rvdecoderResult_andMatrixOutputs_T_47},
            |{&_rvdecoderResult_andMatrixOutputs_T,
              &_rvdecoderResult_andMatrixOutputs_T_1,
              &_rvdecoderResult_andMatrixOutputs_T_3,
              &_rvdecoderResult_andMatrixOutputs_T_5,
              &_rvdecoderResult_andMatrixOutputs_T_15,
              &_rvdecoderResult_andMatrixOutputs_T_20,
              &{io_IFU_2_IDU_bits_data[0],
                io_IFU_2_IDU_bits_data[1],
                rvdecoderResult_invInputs[0],
                rvdecoderResult_invInputs[1],
                io_IFU_2_IDU_bits_data[4],
                rvdecoderResult_invInputs[3],
                rvdecoderResult_invInputs[4],
                io_IFU_2_IDU_bits_data[12],
                rvdecoderResult_invInputs[11],
                rvdecoderResult_invInputs[23],
                rvdecoderResult_invInputs[24],
                rvdecoderResult_invInputs[25],
                rvdecoderResult_invInputs[26],
                rvdecoderResult_invInputs[27],
                rvdecoderResult_invInputs[28],
                rvdecoderResult_invInputs[29]},
              &_rvdecoderResult_andMatrixOutputs_T_27,
              &{io_IFU_2_IDU_bits_data[0],
                io_IFU_2_IDU_bits_data[1],
                rvdecoderResult_invInputs[0],
                rvdecoderResult_invInputs[1],
                io_IFU_2_IDU_bits_data[4],
                rvdecoderResult_invInputs[3],
                rvdecoderResult_invInputs[4],
                io_IFU_2_IDU_bits_data[12],
                rvdecoderResult_invInputs[11],
                io_IFU_2_IDU_bits_data[14],
                rvdecoderResult_invInputs[23],
                rvdecoderResult_invInputs[24],
                rvdecoderResult_invInputs[25],
                rvdecoderResult_invInputs[26],
                rvdecoderResult_invInputs[27],
                rvdecoderResult_invInputs[29]}}})
      2'b00:
        casez_tmp_0 = io_REG_2_IDU_GPR_Bdata;
      2'b01:
        casez_tmp_0 = casez_tmp[31:0];
      2'b10:
        casez_tmp_0 = io_REG_2_IDU_CSR_rdata;
      default:
        casez_tmp_0 = 32'h0;
    endcase
  end // always_comb
  IDU_catch Catch (
    .clock     (clock),
    .valid     (io_IDU_2_EXU_ready & io_IFU_2_IDU_valid & ~reset),
    .Inst_Type
      ({|{&{io_IFU_2_IDU_bits_data[4],
            io_IFU_2_IDU_bits_data[6],
            io_IFU_2_IDU_bits_data[12]},
          &{io_IFU_2_IDU_bits_data[4],
            io_IFU_2_IDU_bits_data[6],
            io_IFU_2_IDU_bits_data[13]}},
        &{catchResult_invInputs[0], catchResult_invInputs[2], catchResult_invInputs[4]}})
  );
  assign io_IFU_2_IDU_ready = io_IDU_2_EXU_ready;
  assign io_IDU_2_EXU_valid = io_IFU_2_IDU_valid;
  assign io_IDU_2_EXU_bits_Branch =
    {|{&_rvdecoderResult_andMatrixOutputs_T_17,
       &{io_IFU_2_IDU_bits_data[0],
         io_IFU_2_IDU_bits_data[1],
         rvdecoderResult_invInputs[0],
         rvdecoderResult_invInputs[1],
         rvdecoderResult_invInputs[2],
         io_IFU_2_IDU_bits_data[5],
         io_IFU_2_IDU_bits_data[6],
         io_IFU_2_IDU_bits_data[12],
         rvdecoderResult_invInputs[11]},
       &_rvdecoderResult_andMatrixOutputs_T_37,
       &_rvdecoderResult_andMatrixOutputs_T_47},
     |{&{io_IFU_2_IDU_bits_data[0],
         io_IFU_2_IDU_bits_data[1],
         rvdecoderResult_invInputs[1],
         rvdecoderResult_invInputs[2],
         io_IFU_2_IDU_bits_data[5],
         io_IFU_2_IDU_bits_data[6],
         rvdecoderResult_invInputs[10],
         rvdecoderResult_invInputs[11],
         rvdecoderResult_invInputs[12]},
       &_rvdecoderResult_andMatrixOutputs_T_17,
       &{io_IFU_2_IDU_bits_data[0],
         io_IFU_2_IDU_bits_data[1],
         rvdecoderResult_invInputs[0],
         rvdecoderResult_invInputs[1],
         rvdecoderResult_invInputs[2],
         io_IFU_2_IDU_bits_data[5],
         io_IFU_2_IDU_bits_data[6],
         io_IFU_2_IDU_bits_data[12],
         io_IFU_2_IDU_bits_data[14]},
       &_rvdecoderResult_andMatrixOutputs_T_47},
     |{&{io_IFU_2_IDU_bits_data[0],
         io_IFU_2_IDU_bits_data[1],
         rvdecoderResult_invInputs[0],
         rvdecoderResult_invInputs[1],
         rvdecoderResult_invInputs[2],
         io_IFU_2_IDU_bits_data[5],
         io_IFU_2_IDU_bits_data[6],
         rvdecoderResult_invInputs[10],
         rvdecoderResult_invInputs[11]},
       &_rvdecoderResult_andMatrixOutputs_T_16,
       &_rvdecoderResult_andMatrixOutputs_T_17,
       &{io_IFU_2_IDU_bits_data[0],
         io_IFU_2_IDU_bits_data[1],
         rvdecoderResult_invInputs[0],
         rvdecoderResult_invInputs[1],
         rvdecoderResult_invInputs[2],
         io_IFU_2_IDU_bits_data[5],
         io_IFU_2_IDU_bits_data[6],
         rvdecoderResult_invInputs[10],
         io_IFU_2_IDU_bits_data[14]},
       &_rvdecoderResult_andMatrixOutputs_T_47}};
  assign io_IDU_2_EXU_bits_MemOp =
    {&{io_IFU_2_IDU_bits_data[0],
       io_IFU_2_IDU_bits_data[1],
       rvdecoderResult_invInputs[0],
       rvdecoderResult_invInputs[1],
       rvdecoderResult_invInputs[2],
       rvdecoderResult_invInputs[4],
       rvdecoderResult_invInputs[10],
       io_IFU_2_IDU_bits_data[13],
       rvdecoderResult_invInputs[12]},
     |{&{io_IFU_2_IDU_bits_data[0],
         io_IFU_2_IDU_bits_data[1],
         rvdecoderResult_invInputs[0],
         rvdecoderResult_invInputs[1],
         rvdecoderResult_invInputs[2],
         rvdecoderResult_invInputs[3],
         rvdecoderResult_invInputs[4],
         io_IFU_2_IDU_bits_data[12],
         rvdecoderResult_invInputs[11]},
       &{io_IFU_2_IDU_bits_data[0],
         io_IFU_2_IDU_bits_data[1],
         rvdecoderResult_invInputs[0],
         rvdecoderResult_invInputs[1],
         rvdecoderResult_invInputs[2],
         rvdecoderResult_invInputs[4],
         io_IFU_2_IDU_bits_data[12],
         rvdecoderResult_invInputs[11],
         rvdecoderResult_invInputs[12]}},
     &_rvdecoderResult_andMatrixOutputs_T_4};
  assign io_IDU_2_EXU_bits_EXU_A =
    (&{io_IFU_2_IDU_bits_data[0],
       io_IFU_2_IDU_bits_data[1],
       io_IFU_2_IDU_bits_data[2],
       rvdecoderResult_invInputs[1],
       io_IFU_2_IDU_bits_data[4],
       rvdecoderResult_invInputs[3],
       rvdecoderResult_invInputs[4]})
      ? io_IFU_2_IDU_bits_PC
      : io_REG_2_IDU_GPR_Adata;
  assign io_IDU_2_EXU_bits_EXU_B = casez_tmp_0;
  assign io_IDU_2_EXU_bits_EXUctr =
    {|{&_rvdecoderResult_andMatrixOutputs_T,
       &_rvdecoderResult_andMatrixOutputs_T_2,
       &_rvdecoderResult_andMatrixOutputs_T_4,
       &_rvdecoderResult_andMatrixOutputs_T_32,
       &{io_IFU_2_IDU_bits_data[0],
         io_IFU_2_IDU_bits_data[1],
         rvdecoderResult_invInputs[0],
         rvdecoderResult_invInputs[1],
         rvdecoderResult_invInputs[3],
         rvdecoderResult_invInputs[4],
         rvdecoderResult_invInputs[10],
         rvdecoderResult_invInputs[11],
         io_IFU_2_IDU_bits_data[14]},
       &{io_IFU_2_IDU_bits_data[0],
         io_IFU_2_IDU_bits_data[1],
         rvdecoderResult_invInputs[0],
         rvdecoderResult_invInputs[1],
         io_IFU_2_IDU_bits_data[4],
         io_IFU_2_IDU_bits_data[5],
         rvdecoderResult_invInputs[4],
         rvdecoderResult_invInputs[10],
         io_IFU_2_IDU_bits_data[14],
         rvdecoderResult_invInputs[23],
         rvdecoderResult_invInputs[24],
         rvdecoderResult_invInputs[25],
         rvdecoderResult_invInputs[26],
         rvdecoderResult_invInputs[27],
         rvdecoderResult_invInputs[28],
         rvdecoderResult_invInputs[29]},
       &{io_IFU_2_IDU_bits_data[0],
         io_IFU_2_IDU_bits_data[1],
         rvdecoderResult_invInputs[0],
         rvdecoderResult_invInputs[1],
         io_IFU_2_IDU_bits_data[4],
         rvdecoderResult_invInputs[3],
         rvdecoderResult_invInputs[4],
         io_IFU_2_IDU_bits_data[13],
         io_IFU_2_IDU_bits_data[14]},
       &{io_IFU_2_IDU_bits_data[0],
         io_IFU_2_IDU_bits_data[1],
         rvdecoderResult_invInputs[0],
         rvdecoderResult_invInputs[1],
         io_IFU_2_IDU_bits_data[4],
         io_IFU_2_IDU_bits_data[5],
         rvdecoderResult_invInputs[4],
         io_IFU_2_IDU_bits_data[13],
         io_IFU_2_IDU_bits_data[14],
         rvdecoderResult_invInputs[23],
         rvdecoderResult_invInputs[24],
         rvdecoderResult_invInputs[25],
         rvdecoderResult_invInputs[26],
         rvdecoderResult_invInputs[27],
         rvdecoderResult_invInputs[28],
         rvdecoderResult_invInputs[29]},
       &{io_IFU_2_IDU_bits_data[0],
         io_IFU_2_IDU_bits_data[1],
         rvdecoderResult_invInputs[0],
         rvdecoderResult_invInputs[1],
         io_IFU_2_IDU_bits_data[4],
         rvdecoderResult_invInputs[4],
         io_IFU_2_IDU_bits_data[12],
         rvdecoderResult_invInputs[11],
         io_IFU_2_IDU_bits_data[14],
         rvdecoderResult_invInputs[23],
         rvdecoderResult_invInputs[24],
         rvdecoderResult_invInputs[25],
         rvdecoderResult_invInputs[26],
         rvdecoderResult_invInputs[27],
         io_IFU_2_IDU_bits_data[30],
         rvdecoderResult_invInputs[29]}},
     |{&_rvdecoderResult_andMatrixOutputs_T,
       &_rvdecoderResult_andMatrixOutputs_T_2,
       &_rvdecoderResult_andMatrixOutputs_T_4,
       &_rvdecoderResult_andMatrixOutputs_T_11,
       &_rvdecoderResult_andMatrixOutputs_T_21,
       &{io_IFU_2_IDU_bits_data[0],
         io_IFU_2_IDU_bits_data[1],
         rvdecoderResult_invInputs[0],
         rvdecoderResult_invInputs[1],
         io_IFU_2_IDU_bits_data[4],
         io_IFU_2_IDU_bits_data[5],
         io_IFU_2_IDU_bits_data[6],
         io_IFU_2_IDU_bits_data[12],
         rvdecoderResult_invInputs[11],
         rvdecoderResult_invInputs[12]}},
     |{&_rvdecoderResult_andMatrixOutputs_T_21,
       &_rvdecoderResult_andMatrixOutputs_T_27,
       &{io_IFU_2_IDU_bits_data[0],
         io_IFU_2_IDU_bits_data[1],
         rvdecoderResult_invInputs[0],
         rvdecoderResult_invInputs[1],
         io_IFU_2_IDU_bits_data[4],
         io_IFU_2_IDU_bits_data[5],
         rvdecoderResult_invInputs[4],
         io_IFU_2_IDU_bits_data[13],
         rvdecoderResult_invInputs[23],
         rvdecoderResult_invInputs[24],
         rvdecoderResult_invInputs[25],
         rvdecoderResult_invInputs[26],
         rvdecoderResult_invInputs[27],
         rvdecoderResult_invInputs[28],
         rvdecoderResult_invInputs[29]},
       &_rvdecoderResult_andMatrixOutputs_T_32,
       &_rvdecoderResult_andMatrixOutputs_T_37},
     |{&_rvdecoderResult_andMatrixOutputs_T_7,
       &_rvdecoderResult_andMatrixOutputs_T_8,
       &_rvdecoderResult_andMatrixOutputs_T_11,
       &_rvdecoderResult_andMatrixOutputs_T_12,
       &{io_IFU_2_IDU_bits_data[0],
         io_IFU_2_IDU_bits_data[1],
         rvdecoderResult_invInputs[0],
         rvdecoderResult_invInputs[1],
         io_IFU_2_IDU_bits_data[4],
         rvdecoderResult_invInputs[3],
         rvdecoderResult_invInputs[4],
         rvdecoderResult_invInputs[10],
         io_IFU_2_IDU_bits_data[13],
         rvdecoderResult_invInputs[12]},
       &{io_IFU_2_IDU_bits_data[0],
         io_IFU_2_IDU_bits_data[1],
         rvdecoderResult_invInputs[0],
         rvdecoderResult_invInputs[1],
         io_IFU_2_IDU_bits_data[4],
         io_IFU_2_IDU_bits_data[5],
         rvdecoderResult_invInputs[4],
         rvdecoderResult_invInputs[10],
         io_IFU_2_IDU_bits_data[13],
         rvdecoderResult_invInputs[12],
         rvdecoderResult_invInputs[23],
         rvdecoderResult_invInputs[24],
         rvdecoderResult_invInputs[25],
         rvdecoderResult_invInputs[26],
         rvdecoderResult_invInputs[27],
         rvdecoderResult_invInputs[28],
         rvdecoderResult_invInputs[29]},
       &{io_IFU_2_IDU_bits_data[0],
         io_IFU_2_IDU_bits_data[1],
         rvdecoderResult_invInputs[0],
         rvdecoderResult_invInputs[1],
         io_IFU_2_IDU_bits_data[4],
         rvdecoderResult_invInputs[3],
         rvdecoderResult_invInputs[4],
         rvdecoderResult_invInputs[10],
         rvdecoderResult_invInputs[11],
         io_IFU_2_IDU_bits_data[14]},
       &{io_IFU_2_IDU_bits_data[0],
         io_IFU_2_IDU_bits_data[1],
         rvdecoderResult_invInputs[0],
         rvdecoderResult_invInputs[1],
         io_IFU_2_IDU_bits_data[4],
         io_IFU_2_IDU_bits_data[5],
         rvdecoderResult_invInputs[4],
         rvdecoderResult_invInputs[11],
         io_IFU_2_IDU_bits_data[14],
         rvdecoderResult_invInputs[23],
         rvdecoderResult_invInputs[24],
         rvdecoderResult_invInputs[25],
         rvdecoderResult_invInputs[26],
         rvdecoderResult_invInputs[27],
         rvdecoderResult_invInputs[28],
         rvdecoderResult_invInputs[29]},
       &{io_IFU_2_IDU_bits_data[0],
         io_IFU_2_IDU_bits_data[1],
         rvdecoderResult_invInputs[0],
         rvdecoderResult_invInputs[1],
         io_IFU_2_IDU_bits_data[4],
         rvdecoderResult_invInputs[4],
         io_IFU_2_IDU_bits_data[12],
         rvdecoderResult_invInputs[11],
         io_IFU_2_IDU_bits_data[14],
         rvdecoderResult_invInputs[23],
         rvdecoderResult_invInputs[24],
         rvdecoderResult_invInputs[25],
         rvdecoderResult_invInputs[26],
         rvdecoderResult_invInputs[27],
         rvdecoderResult_invInputs[28],
         rvdecoderResult_invInputs[29]},
       &{io_IFU_2_IDU_bits_data[0],
         io_IFU_2_IDU_bits_data[1],
         rvdecoderResult_invInputs[0],
         rvdecoderResult_invInputs[1],
         io_IFU_2_IDU_bits_data[4],
         io_IFU_2_IDU_bits_data[5],
         rvdecoderResult_invInputs[4],
         io_IFU_2_IDU_bits_data[12],
         io_IFU_2_IDU_bits_data[14],
         rvdecoderResult_invInputs[23],
         rvdecoderResult_invInputs[24],
         rvdecoderResult_invInputs[25],
         rvdecoderResult_invInputs[26],
         rvdecoderResult_invInputs[27],
         rvdecoderResult_invInputs[28],
         rvdecoderResult_invInputs[29]},
       &{io_IFU_2_IDU_bits_data[0],
         io_IFU_2_IDU_bits_data[1],
         rvdecoderResult_invInputs[0],
         rvdecoderResult_invInputs[1],
         io_IFU_2_IDU_bits_data[4],
         rvdecoderResult_invInputs[3],
         rvdecoderResult_invInputs[4],
         io_IFU_2_IDU_bits_data[12],
         io_IFU_2_IDU_bits_data[13],
         io_IFU_2_IDU_bits_data[14]},
       &{io_IFU_2_IDU_bits_data[0],
         io_IFU_2_IDU_bits_data[1],
         rvdecoderResult_invInputs[0],
         rvdecoderResult_invInputs[1],
         io_IFU_2_IDU_bits_data[4],
         io_IFU_2_IDU_bits_data[5],
         rvdecoderResult_invInputs[4],
         rvdecoderResult_invInputs[10],
         rvdecoderResult_invInputs[11],
         rvdecoderResult_invInputs[12],
         rvdecoderResult_invInputs[23],
         rvdecoderResult_invInputs[24],
         rvdecoderResult_invInputs[25],
         rvdecoderResult_invInputs[26],
         rvdecoderResult_invInputs[27],
         io_IFU_2_IDU_bits_data[30],
         rvdecoderResult_invInputs[29]}}};
  assign io_IDU_2_EXU_bits_csr_ctr = _rvdecoderResult_T_6;
  assign io_IDU_2_EXU_bits_Imm = casez_tmp[31:0];
  assign io_IDU_2_EXU_bits_GPR_waddr =
    (|{&_rvdecoderResult_andMatrixOutputs_T,
       &_rvdecoderResult_andMatrixOutputs_T_1,
       &_rvdecoderResult_andMatrixOutputs_T_3,
       &_rvdecoderResult_andMatrixOutputs_T_5,
       &{io_IFU_2_IDU_bits_data[0],
         io_IFU_2_IDU_bits_data[1],
         rvdecoderResult_invInputs[0],
         rvdecoderResult_invInputs[1],
         io_IFU_2_IDU_bits_data[4],
         io_IFU_2_IDU_bits_data[5],
         rvdecoderResult_invInputs[4],
         rvdecoderResult_invInputs[10],
         rvdecoderResult_invInputs[11],
         rvdecoderResult_invInputs[12],
         rvdecoderResult_invInputs[23],
         rvdecoderResult_invInputs[24],
         rvdecoderResult_invInputs[25],
         rvdecoderResult_invInputs[26],
         rvdecoderResult_invInputs[27],
         rvdecoderResult_invInputs[29]},
       &{io_IFU_2_IDU_bits_data[0],
         io_IFU_2_IDU_bits_data[1],
         rvdecoderResult_invInputs[0],
         rvdecoderResult_invInputs[1],
         io_IFU_2_IDU_bits_data[4],
         io_IFU_2_IDU_bits_data[5],
         rvdecoderResult_invInputs[4],
         rvdecoderResult_invInputs[23],
         rvdecoderResult_invInputs[24],
         rvdecoderResult_invInputs[25],
         rvdecoderResult_invInputs[26],
         rvdecoderResult_invInputs[27],
         rvdecoderResult_invInputs[28],
         rvdecoderResult_invInputs[29]},
       &_rvdecoderResult_andMatrixOutputs_T_15,
       &_rvdecoderResult_andMatrixOutputs_T_16,
       &_rvdecoderResult_andMatrixOutputs_T_20,
       &_rvdecoderResult_andMatrixOutputs_T_21,
       &_rvdecoderResult_andMatrixOutputs_T_24,
       &_rvdecoderResult_andMatrixOutputs_T_27,
       &_rvdecoderResult_andMatrixOutputs_T_31,
       &{io_IFU_2_IDU_bits_data[0],
         io_IFU_2_IDU_bits_data[1],
         rvdecoderResult_invInputs[0],
         rvdecoderResult_invInputs[1],
         io_IFU_2_IDU_bits_data[4],
         rvdecoderResult_invInputs[4],
         io_IFU_2_IDU_bits_data[12],
         rvdecoderResult_invInputs[11],
         io_IFU_2_IDU_bits_data[14],
         rvdecoderResult_invInputs[23],
         rvdecoderResult_invInputs[24],
         rvdecoderResult_invInputs[25],
         rvdecoderResult_invInputs[26],
         rvdecoderResult_invInputs[27],
         rvdecoderResult_invInputs[29]}})
      ? io_IFU_2_IDU_bits_data[10:7]
      : 4'h0;
  assign io_IDU_2_EXU_bits_PC = io_IFU_2_IDU_bits_PC;
  assign io_IDU_2_REG_GPR_Aaddr = io_IFU_2_IDU_bits_data[19:15];
  assign io_IDU_2_REG_GPR_Baddr = io_IFU_2_IDU_bits_data[24:20];
  assign io_IDU_2_REG_CSR_raddr =
    (&_rvdecoderResult_T_6)
      ? 12'h305
      : _rvdecoderResult_T_6 == 2'h1 ? 12'h341 : io_IFU_2_IDU_bits_data[31:20];
endmodule

// external module ALU_catch

module ALU(
  input         clock,
                reset,
  output        io_IDU_2_EXU_ready,
  input         io_IDU_2_EXU_valid,
  input  [2:0]  io_IDU_2_EXU_bits_Branch,
  input  [31:0] io_IDU_2_EXU_bits_EXU_A,
                io_IDU_2_EXU_bits_EXU_B,
  input  [3:0]  io_IDU_2_EXU_bits_EXUctr,
  input  [1:0]  io_IDU_2_EXU_bits_csr_ctr,
  input  [31:0] io_IDU_2_EXU_bits_Imm,
  input  [3:0]  io_IDU_2_EXU_bits_GPR_waddr,
  input  [31:0] io_IDU_2_EXU_bits_PC,
  input         io_EXU_2_WBU_ready,
  output        io_EXU_2_WBU_valid,
  output [2:0]  io_EXU_2_WBU_bits_Branch,
  output [31:0] io_EXU_2_WBU_bits_Jmp_Pc,
  output        io_EXU_2_WBU_bits_MemtoReg,
  output [1:0]  io_EXU_2_WBU_bits_csr_ctr,
  output [11:0] io_EXU_2_WBU_bits_CSR_waddr,
  output [3:0]  io_EXU_2_WBU_bits_GPR_waddr,
  output [31:0] io_EXU_2_WBU_bits_PC,
                io_EXU_2_WBU_bits_CSR_rdata,
                io_EXU_2_WBU_bits_Result
);

  reg  [31:0] casez_tmp;
  wire [31:0] _adder_T_4 =
    io_IDU_2_EXU_bits_EXU_A + ({32{|io_IDU_2_EXU_bits_EXUctr}} ^ io_IDU_2_EXU_bits_EXU_B)
    + {31'h0, |io_IDU_2_EXU_bits_EXUctr};
  wire [31:0] _GEN = {27'h0, io_IDU_2_EXU_bits_EXU_B[4:0]};
  wire [62:0] _shifter_result_T_1 =
    {31'h0, io_IDU_2_EXU_bits_EXU_A} << io_IDU_2_EXU_bits_EXU_B[4:0];
  wire [31:0] shifter_result =
    io_IDU_2_EXU_bits_EXUctr == 4'h8
      ? $signed($signed(io_IDU_2_EXU_bits_EXU_A) >>> _GEN)
      : io_IDU_2_EXU_bits_EXUctr == 4'h7
          ? io_IDU_2_EXU_bits_EXU_A >> _GEN
          : io_IDU_2_EXU_bits_EXUctr == 4'h6 ? _shifter_result_T_1[31:0] : 32'h0;
  wire [31:0] _Result_T_1 =
    {31'h0,
     io_IDU_2_EXU_bits_EXUctr == 4'h2
       ? io_IDU_2_EXU_bits_EXU_A < io_IDU_2_EXU_bits_EXU_B
       : $signed(io_IDU_2_EXU_bits_EXU_A) < $signed(io_IDU_2_EXU_bits_EXU_B)};
  wire [31:0] _Result_T_21 =
    io_IDU_2_EXU_bits_EXUctr == 4'h1 | ~(|io_IDU_2_EXU_bits_EXUctr) ? _adder_T_4 : 32'h0;
  always_comb begin
    casez (io_IDU_2_EXU_bits_EXUctr)
      4'b0000:
        casez_tmp = _Result_T_21;
      4'b0001:
        casez_tmp = _adder_T_4;
      4'b0010:
        casez_tmp = _Result_T_1;
      4'b0011:
        casez_tmp = _Result_T_1;
      4'b0100:
        casez_tmp = io_IDU_2_EXU_bits_EXU_A;
      4'b0101:
        casez_tmp = io_IDU_2_EXU_bits_EXU_B;
      4'b0110:
        casez_tmp = shifter_result;
      4'b0111:
        casez_tmp = shifter_result;
      4'b1000:
        casez_tmp = shifter_result;
      4'b1001:
        casez_tmp = io_IDU_2_EXU_bits_EXU_A ^ io_IDU_2_EXU_bits_EXU_B;
      4'b1010:
        casez_tmp = io_IDU_2_EXU_bits_EXU_A | io_IDU_2_EXU_bits_EXU_B;
      4'b1011:
        casez_tmp = io_IDU_2_EXU_bits_EXU_A & io_IDU_2_EXU_bits_EXU_B;
      4'b1100:
        casez_tmp = _Result_T_21;
      4'b1101:
        casez_tmp = _Result_T_21;
      4'b1110:
        casez_tmp = _Result_T_21;
      default:
        casez_tmp = _Result_T_21;
    endcase
  end // always_comb
  ALU_catch Catch (
    .clock (clock),
    .valid (io_EXU_2_WBU_ready & io_IDU_2_EXU_valid & ~reset)
  );
  assign io_IDU_2_EXU_ready = io_EXU_2_WBU_ready;
  assign io_EXU_2_WBU_valid = io_IDU_2_EXU_valid;
  assign io_EXU_2_WBU_bits_Branch = io_IDU_2_EXU_bits_Branch;
  assign io_EXU_2_WBU_bits_Jmp_Pc =
    (&io_IDU_2_EXU_bits_Branch)
      ? io_IDU_2_EXU_bits_EXU_B
      : io_IDU_2_EXU_bits_Branch == 3'h2
          ? io_IDU_2_EXU_bits_EXU_A + io_IDU_2_EXU_bits_Imm
          : io_IDU_2_EXU_bits_PC + io_IDU_2_EXU_bits_Imm;
  assign io_EXU_2_WBU_bits_MemtoReg = io_IDU_2_EXU_bits_EXUctr == 4'hC;
  assign io_EXU_2_WBU_bits_csr_ctr = io_IDU_2_EXU_bits_csr_ctr;
  assign io_EXU_2_WBU_bits_CSR_waddr = io_IDU_2_EXU_bits_Imm[11:0];
  assign io_EXU_2_WBU_bits_GPR_waddr = io_IDU_2_EXU_bits_GPR_waddr;
  assign io_EXU_2_WBU_bits_PC = io_IDU_2_EXU_bits_PC;
  assign io_EXU_2_WBU_bits_CSR_rdata = io_IDU_2_EXU_bits_EXU_B;
  assign io_EXU_2_WBU_bits_Result = casez_tmp;
endmodule

// external module WBU_catch

module WBU(
  input         clock,
                reset,
                io_EXU_2_WBU_valid,
  input  [2:0]  io_EXU_2_WBU_bits_Branch,
  input  [31:0] io_EXU_2_WBU_bits_Jmp_Pc,
  input         io_EXU_2_WBU_bits_MemtoReg,
  input  [1:0]  io_EXU_2_WBU_bits_csr_ctr,
  input  [11:0] io_EXU_2_WBU_bits_CSR_waddr,
  input  [3:0]  io_EXU_2_WBU_bits_GPR_waddr,
  input  [31:0] io_EXU_2_WBU_bits_PC,
                io_EXU_2_WBU_bits_CSR_rdata,
                io_EXU_2_WBU_bits_Result,
                io_EXU_2_WBU_bits_Mem_rdata,
  output        io_WBU_2_IFU_valid,
  output [31:0] io_WBU_2_IFU_bits_Next_PC,
  output        io_WBU_2_REG_inst_valid,
  output [3:0]  io_WBU_2_REG_GPR_waddr,
  output [31:0] io_WBU_2_REG_GPR_wdata,
  output [1:0]  io_WBU_2_REG_CSR_ctr,
  output [11:0] io_WBU_2_REG_CSR_waddra,
  output [31:0] io_WBU_2_REG_CSR_wdataa
);

  wire [31:0] _Default_Next_Pc_T = io_EXU_2_WBU_bits_PC + 32'h4;
  wire        _Next_Pc_T_2 = io_EXU_2_WBU_bits_Result == 32'h0;
  wire [31:0] Next_Pc =
    io_EXU_2_WBU_bits_Branch == 3'h0
      ? _Default_Next_Pc_T
      : io_EXU_2_WBU_bits_Branch == 3'h6
          ? (io_EXU_2_WBU_bits_Result[0] ? _Default_Next_Pc_T : io_EXU_2_WBU_bits_Jmp_Pc)
          : io_EXU_2_WBU_bits_Branch == 3'h5
              ? (io_EXU_2_WBU_bits_Result[0]
                   ? io_EXU_2_WBU_bits_Jmp_Pc
                   : _Default_Next_Pc_T)
              : io_EXU_2_WBU_bits_Branch == 3'h4
                  ? (_Next_Pc_T_2 ? _Default_Next_Pc_T : io_EXU_2_WBU_bits_Jmp_Pc)
                  : io_EXU_2_WBU_bits_Branch != 3'h3 | _Next_Pc_T_2
                      ? io_EXU_2_WBU_bits_Jmp_Pc
                      : _Default_Next_Pc_T;
  wire [31:0] GPR_wdata =
    io_EXU_2_WBU_bits_MemtoReg
      ? io_EXU_2_WBU_bits_Mem_rdata
      : io_EXU_2_WBU_bits_csr_ctr == 2'h0
          ? (io_EXU_2_WBU_bits_Branch == 3'h2 | io_EXU_2_WBU_bits_Branch == 3'h1
               ? _Default_Next_Pc_T
               : io_EXU_2_WBU_bits_Result)
          : io_EXU_2_WBU_bits_CSR_rdata;
  wire [11:0] CSR_waddra =
    (&io_EXU_2_WBU_bits_csr_ctr) ? 12'h341 : io_EXU_2_WBU_bits_CSR_waddr;
  wire [31:0] CSR_wdataa =
    (&io_EXU_2_WBU_bits_csr_ctr) ? io_EXU_2_WBU_bits_PC : io_EXU_2_WBU_bits_Result;
  WBU_catch Catch (
    .clock      (clock),
    .valid      (io_EXU_2_WBU_valid & ~reset),
    .next_pc    (Next_Pc),
    .gpr_waddr  ({28'h0, io_EXU_2_WBU_bits_GPR_waddr}),
    .gpr_wdata  (GPR_wdata),
    .csr_wena   ({31'h0, |io_EXU_2_WBU_bits_csr_ctr}),
    .csr_waddra ({20'h0, CSR_waddra}),
    .csr_wdataa (CSR_wdataa),
    .csr_wenb   ({31'h0, &io_EXU_2_WBU_bits_csr_ctr}),
    .csr_waddrb (32'h342),
    .csr_wdatab (32'hB)
  );
  assign io_WBU_2_IFU_valid = io_EXU_2_WBU_valid;
  assign io_WBU_2_IFU_bits_Next_PC = Next_Pc;
  assign io_WBU_2_REG_inst_valid = io_EXU_2_WBU_valid;
  assign io_WBU_2_REG_GPR_waddr = io_EXU_2_WBU_bits_GPR_waddr;
  assign io_WBU_2_REG_GPR_wdata = GPR_wdata;
  assign io_WBU_2_REG_CSR_ctr = io_EXU_2_WBU_bits_csr_ctr;
  assign io_WBU_2_REG_CSR_waddra = CSR_waddra;
  assign io_WBU_2_REG_CSR_wdataa = CSR_wdataa;
endmodule

module REG(
  input         clock,
                reset,
  output [31:0] io_REG_2_IDU_CSR_rdata,
                io_REG_2_IDU_GPR_Adata,
                io_REG_2_IDU_GPR_Bdata,
  input  [4:0]  io_IDU_2_REG_GPR_Aaddr,
                io_IDU_2_REG_GPR_Baddr,
  input  [11:0] io_IDU_2_REG_CSR_raddr,
  input         io_WBU_2_REG_inst_valid,
  input  [3:0]  io_WBU_2_REG_GPR_waddr,
  input  [31:0] io_WBU_2_REG_GPR_wdata,
  input  [1:0]  io_WBU_2_REG_CSR_ctr,
  input  [11:0] io_WBU_2_REG_CSR_waddra,
  input  [31:0] io_WBU_2_REG_CSR_wdataa
);

  reg  [31:0] gpr_0;
  reg  [31:0] gpr_1;
  reg  [31:0] gpr_2;
  reg  [31:0] gpr_3;
  reg  [31:0] gpr_4;
  reg  [31:0] gpr_5;
  reg  [31:0] gpr_6;
  reg  [31:0] gpr_7;
  reg  [31:0] gpr_8;
  reg  [31:0] gpr_9;
  reg  [31:0] gpr_10;
  reg  [31:0] gpr_11;
  reg  [31:0] gpr_12;
  reg  [31:0] gpr_13;
  reg  [31:0] gpr_14;
  reg  [31:0] casez_tmp;
  always_comb begin
    casez (io_IDU_2_REG_GPR_Aaddr[3:0] - 4'h1)
      4'b0000:
        casez_tmp = gpr_0;
      4'b0001:
        casez_tmp = gpr_1;
      4'b0010:
        casez_tmp = gpr_2;
      4'b0011:
        casez_tmp = gpr_3;
      4'b0100:
        casez_tmp = gpr_4;
      4'b0101:
        casez_tmp = gpr_5;
      4'b0110:
        casez_tmp = gpr_6;
      4'b0111:
        casez_tmp = gpr_7;
      4'b1000:
        casez_tmp = gpr_8;
      4'b1001:
        casez_tmp = gpr_9;
      4'b1010:
        casez_tmp = gpr_10;
      4'b1011:
        casez_tmp = gpr_11;
      4'b1100:
        casez_tmp = gpr_12;
      4'b1101:
        casez_tmp = gpr_13;
      4'b1110:
        casez_tmp = gpr_14;
      default:
        casez_tmp = gpr_0;
    endcase
  end // always_comb
  reg  [31:0] casez_tmp_0;
  always_comb begin
    casez (io_IDU_2_REG_GPR_Baddr[3:0] - 4'h1)
      4'b0000:
        casez_tmp_0 = gpr_0;
      4'b0001:
        casez_tmp_0 = gpr_1;
      4'b0010:
        casez_tmp_0 = gpr_2;
      4'b0011:
        casez_tmp_0 = gpr_3;
      4'b0100:
        casez_tmp_0 = gpr_4;
      4'b0101:
        casez_tmp_0 = gpr_5;
      4'b0110:
        casez_tmp_0 = gpr_6;
      4'b0111:
        casez_tmp_0 = gpr_7;
      4'b1000:
        casez_tmp_0 = gpr_8;
      4'b1001:
        casez_tmp_0 = gpr_9;
      4'b1010:
        casez_tmp_0 = gpr_10;
      4'b1011:
        casez_tmp_0 = gpr_11;
      4'b1100:
        casez_tmp_0 = gpr_12;
      4'b1101:
        casez_tmp_0 = gpr_13;
      4'b1110:
        casez_tmp_0 = gpr_14;
      default:
        casez_tmp_0 = gpr_0;
    endcase
  end // always_comb
  reg  [31:0] mstatus;
  reg  [31:0] mtevc;
  reg  [31:0] mepc;
  reg  [31:0] mcause;
  reg  [31:0] mscratch;
  wire        csra_wen =
    (io_WBU_2_REG_CSR_ctr == 2'h2 | (&io_WBU_2_REG_CSR_ctr)) & io_WBU_2_REG_inst_valid;
  wire        gpr_wen = (|io_WBU_2_REG_GPR_waddr) & io_WBU_2_REG_inst_valid;
  wire [3:0]  _GEN = io_WBU_2_REG_GPR_waddr - 4'h1;
  wire        _GEN_0 = io_WBU_2_REG_CSR_waddra == 12'h300;
  wire        _GEN_1 = io_WBU_2_REG_CSR_waddra == 12'h305;
  wire        _GEN_2 = io_WBU_2_REG_CSR_waddra == 12'h340;
  wire        _GEN_3 = io_WBU_2_REG_CSR_waddra == 12'h341;
  always @(posedge clock) begin
    if (reset) begin
      gpr_0 <= 32'h0;
      gpr_1 <= 32'h0;
      gpr_2 <= 32'h0;
      gpr_3 <= 32'h0;
      gpr_4 <= 32'h0;
      gpr_5 <= 32'h0;
      gpr_6 <= 32'h0;
      gpr_7 <= 32'h0;
      gpr_8 <= 32'h0;
      gpr_9 <= 32'h0;
      gpr_10 <= 32'h0;
      gpr_11 <= 32'h0;
      gpr_12 <= 32'h0;
      gpr_13 <= 32'h0;
      gpr_14 <= 32'h0;
      mstatus <= 32'h0;
      mtevc <= 32'h0;
      mepc <= 32'h0;
      mcause <= 32'h0;
      mscratch <= 32'h0;
    end
    else begin
      if (gpr_wen & _GEN == 4'h0)
        gpr_0 <= io_WBU_2_REG_GPR_wdata;
      if (gpr_wen & _GEN == 4'h1)
        gpr_1 <= io_WBU_2_REG_GPR_wdata;
      if (gpr_wen & _GEN == 4'h2)
        gpr_2 <= io_WBU_2_REG_GPR_wdata;
      if (gpr_wen & _GEN == 4'h3)
        gpr_3 <= io_WBU_2_REG_GPR_wdata;
      if (gpr_wen & _GEN == 4'h4)
        gpr_4 <= io_WBU_2_REG_GPR_wdata;
      if (gpr_wen & _GEN == 4'h5)
        gpr_5 <= io_WBU_2_REG_GPR_wdata;
      if (gpr_wen & _GEN == 4'h6)
        gpr_6 <= io_WBU_2_REG_GPR_wdata;
      if (gpr_wen & _GEN == 4'h7)
        gpr_7 <= io_WBU_2_REG_GPR_wdata;
      if (gpr_wen & _GEN == 4'h8)
        gpr_8 <= io_WBU_2_REG_GPR_wdata;
      if (gpr_wen & _GEN == 4'h9)
        gpr_9 <= io_WBU_2_REG_GPR_wdata;
      if (gpr_wen & _GEN == 4'hA)
        gpr_10 <= io_WBU_2_REG_GPR_wdata;
      if (gpr_wen & _GEN == 4'hB)
        gpr_11 <= io_WBU_2_REG_GPR_wdata;
      if (gpr_wen & _GEN == 4'hC)
        gpr_12 <= io_WBU_2_REG_GPR_wdata;
      if (gpr_wen & _GEN == 4'hD)
        gpr_13 <= io_WBU_2_REG_GPR_wdata;
      if (gpr_wen & _GEN == 4'hE)
        gpr_14 <= io_WBU_2_REG_GPR_wdata;
      if (csra_wen & _GEN_0)
        mstatus <= io_WBU_2_REG_CSR_wdataa;
      if (~csra_wen | _GEN_0 | ~_GEN_1) begin
      end
      else
        mtevc <= io_WBU_2_REG_CSR_wdataa;
      if (~csra_wen | _GEN_0 | _GEN_1 | _GEN_2 | ~_GEN_3) begin
      end
      else
        mepc <= io_WBU_2_REG_CSR_wdataa;
      if ((&io_WBU_2_REG_CSR_ctr) & io_WBU_2_REG_inst_valid)
        mcause <= 32'hB;
      else if (~csra_wen | _GEN_0 | _GEN_1 | _GEN_2 | _GEN_3
               | io_WBU_2_REG_CSR_waddra != 12'h342) begin
      end
      else
        mcause <= io_WBU_2_REG_CSR_wdataa;
      if (~csra_wen | _GEN_0 | _GEN_1 | ~_GEN_2) begin
      end
      else
        mscratch <= io_WBU_2_REG_CSR_wdataa;
    end
  end // always @(posedge)
  assign io_REG_2_IDU_CSR_rdata =
    io_IDU_2_REG_CSR_raddr == 12'hF12
      ? 32'h15FDEE6
      : io_IDU_2_REG_CSR_raddr == 12'hF11
          ? 32'h79737978
          : io_IDU_2_REG_CSR_raddr == 12'h342
              ? mcause
              : io_IDU_2_REG_CSR_raddr == 12'h341
                  ? mepc
                  : io_IDU_2_REG_CSR_raddr == 12'h340
                      ? mscratch
                      : io_IDU_2_REG_CSR_raddr == 12'h305
                          ? mtevc
                          : io_IDU_2_REG_CSR_raddr == 12'h300 ? mstatus : 32'h0;
  assign io_REG_2_IDU_GPR_Adata = (|io_IDU_2_REG_GPR_Aaddr) ? casez_tmp : 32'h0;
  assign io_REG_2_IDU_GPR_Bdata = (|io_IDU_2_REG_GPR_Baddr) ? casez_tmp_0 : 32'h0;
endmodule

// external module Pipeline_catch

module PipelineCtrl(
  input         io_GPR_read_valid,
  input  [4:0]  io_GPR_read_bits_GPR_Aaddr,
                io_GPR_read_bits_GPR_Baddr,
  input  [31:0] io_IFU_out_bits_PC,
  input         io_IDU_in_valid,
  input  [31:0] io_IDU_in_bits_PC,
  input         io_ALU_in_valid,
  input  [3:0]  io_ALU_in_bits_GPR_waddr,
  input  [31:0] io_ALU_in_bits_PC,
  input         io_LSU_in_valid,
  input  [31:0] io_LSU_in_bits_PC,
  input         io_WBU_in_valid,
  input  [3:0]  io_WBU_in_bits_GPR_waddr,
  input         io_Branch_msg_valid,
  input  [31:0] io_Branch_msg_bits_Next_PC,
  output        io_IFUCtrl_flush,
                io_IDUCtrl_stall,
                io_IDUCtrl_flush,
                io_EXUCtrl_flush
);

  wire       _io_EXUCtrl_flush_T = io_IFU_out_bits_PC != io_Branch_msg_bits_Next_PC;
  wire       _io_EXUCtrl_flush_T_2 = io_ALU_in_bits_PC != io_Branch_msg_bits_Next_PC;
  wire       _io_EXUCtrl_flush_T_4 = io_LSU_in_bits_PC != io_Branch_msg_bits_Next_PC;
  wire       _io_EXUCtrl_flush_T_6 = io_IDU_in_bits_PC != io_Branch_msg_bits_Next_PC;
  wire       io_IFUCtrl_flush_0 =
    io_ALU_in_valid
      ? io_Branch_msg_valid & _io_EXUCtrl_flush_T_2
      : io_LSU_in_valid
          ? io_Branch_msg_valid & _io_EXUCtrl_flush_T_4
          : io_IDU_in_valid
              ? io_Branch_msg_valid & _io_EXUCtrl_flush_T_6
              : io_Branch_msg_valid & _io_EXUCtrl_flush_T;
  wire [4:0] _GEN = {1'h0, io_ALU_in_bits_GPR_waddr};
  wire [4:0] _GEN_0 = {1'h0, io_WBU_in_bits_GPR_waddr};
  Pipeline_catch pipeline_catch (
    .valid          (io_IFUCtrl_flush_0),
    .pipeline_flush (io_IFUCtrl_flush_0)
  );
  assign io_IFUCtrl_flush = io_IFUCtrl_flush_0;
  assign io_IDUCtrl_stall =
    io_GPR_read_valid
    & (io_GPR_read_bits_GPR_Aaddr == _GEN & (|io_GPR_read_bits_GPR_Aaddr)
       & io_ALU_in_valid | io_GPR_read_bits_GPR_Aaddr == _GEN_0
       & (|io_GPR_read_bits_GPR_Aaddr) & io_WBU_in_valid
       | io_GPR_read_bits_GPR_Baddr == _GEN & (|io_GPR_read_bits_GPR_Baddr)
       & io_ALU_in_valid | io_GPR_read_bits_GPR_Baddr == _GEN_0
       & (|io_GPR_read_bits_GPR_Baddr) & io_WBU_in_valid) | io_LSU_in_valid;
  assign io_IDUCtrl_flush =
    io_ALU_in_valid
      ? io_Branch_msg_valid & _io_EXUCtrl_flush_T_2
      : io_LSU_in_valid
          ? io_Branch_msg_valid & _io_EXUCtrl_flush_T_4
          : io_IDU_in_valid
              ? io_Branch_msg_valid & _io_EXUCtrl_flush_T_6
              : io_Branch_msg_valid & _io_EXUCtrl_flush_T;
  assign io_EXUCtrl_flush =
    io_ALU_in_valid
      ? io_Branch_msg_valid & _io_EXUCtrl_flush_T_2
      : io_LSU_in_valid
          ? io_Branch_msg_valid & _io_EXUCtrl_flush_T_4
          : io_IDU_in_valid
              ? io_Branch_msg_valid & _io_EXUCtrl_flush_T_6
              : io_Branch_msg_valid & _io_EXUCtrl_flush_T;
endmodule

module Arbiter2_BUS_EXU_2_WBU(
  input         io_in_0_valid,
  input  [2:0]  io_in_0_bits_Branch,
  input         io_in_0_bits_MemtoReg,
  input  [1:0]  io_in_0_bits_csr_ctr,
  input  [11:0] io_in_0_bits_CSR_waddr,
  input  [3:0]  io_in_0_bits_GPR_waddr,
  input  [31:0] io_in_0_bits_PC,
                io_in_0_bits_CSR_rdata,
                io_in_0_bits_Mem_rdata,
  output        io_in_1_ready,
  input         io_in_1_valid,
  input  [2:0]  io_in_1_bits_Branch,
  input  [31:0] io_in_1_bits_Jmp_Pc,
  input         io_in_1_bits_MemtoReg,
  input  [1:0]  io_in_1_bits_csr_ctr,
  input  [11:0] io_in_1_bits_CSR_waddr,
  input  [3:0]  io_in_1_bits_GPR_waddr,
  input  [31:0] io_in_1_bits_PC,
                io_in_1_bits_CSR_rdata,
                io_in_1_bits_Result,
  output        io_out_valid,
  output [2:0]  io_out_bits_Branch,
  output [31:0] io_out_bits_Jmp_Pc,
  output        io_out_bits_MemtoReg,
  output [1:0]  io_out_bits_csr_ctr,
  output [11:0] io_out_bits_CSR_waddr,
  output [3:0]  io_out_bits_GPR_waddr,
  output [31:0] io_out_bits_PC,
                io_out_bits_CSR_rdata,
                io_out_bits_Result,
                io_out_bits_Mem_rdata
);

  assign io_in_1_ready = ~io_in_0_valid;
  assign io_out_valid = io_in_0_valid | io_in_1_valid;
  assign io_out_bits_Branch = io_in_0_valid ? io_in_0_bits_Branch : io_in_1_bits_Branch;
  assign io_out_bits_Jmp_Pc = io_in_0_valid ? 32'h0 : io_in_1_bits_Jmp_Pc;
  assign io_out_bits_MemtoReg =
    io_in_0_valid ? io_in_0_bits_MemtoReg : io_in_1_bits_MemtoReg;
  assign io_out_bits_csr_ctr =
    io_in_0_valid ? io_in_0_bits_csr_ctr : io_in_1_bits_csr_ctr;
  assign io_out_bits_CSR_waddr =
    io_in_0_valid ? io_in_0_bits_CSR_waddr : io_in_1_bits_CSR_waddr;
  assign io_out_bits_GPR_waddr =
    io_in_0_valid ? io_in_0_bits_GPR_waddr : io_in_1_bits_GPR_waddr;
  assign io_out_bits_PC = io_in_0_valid ? io_in_0_bits_PC : io_in_1_bits_PC;
  assign io_out_bits_CSR_rdata =
    io_in_0_valid ? io_in_0_bits_CSR_rdata : io_in_1_bits_CSR_rdata;
  assign io_out_bits_Result = io_in_0_valid ? 32'h0 : io_in_1_bits_Result;
  assign io_out_bits_Mem_rdata = io_in_0_valid ? io_in_0_bits_Mem_rdata : 32'h0;
endmodule

module npc(
  input clock,
        reset
);

  wire        _arb_io_in_1_ready;
  wire        _arb_io_out_valid;
  wire [2:0]  _arb_io_out_bits_Branch;
  wire [31:0] _arb_io_out_bits_Jmp_Pc;
  wire        _arb_io_out_bits_MemtoReg;
  wire [1:0]  _arb_io_out_bits_csr_ctr;
  wire [11:0] _arb_io_out_bits_CSR_waddr;
  wire [3:0]  _arb_io_out_bits_GPR_waddr;
  wire [31:0] _arb_io_out_bits_PC;
  wire [31:0] _arb_io_out_bits_CSR_rdata;
  wire [31:0] _arb_io_out_bits_Result;
  wire [31:0] _arb_io_out_bits_Mem_rdata;
  wire        _PipelineCtrl_io_IFUCtrl_flush;
  wire        _PipelineCtrl_io_IDUCtrl_stall;
  wire        _PipelineCtrl_io_IDUCtrl_flush;
  wire        _PipelineCtrl_io_EXUCtrl_flush;
  wire [31:0] _REG_io_REG_2_IDU_CSR_rdata;
  wire [31:0] _REG_io_REG_2_IDU_GPR_Adata;
  wire [31:0] _REG_io_REG_2_IDU_GPR_Bdata;
  wire        _WBU_io_WBU_2_IFU_valid;
  wire [31:0] _WBU_io_WBU_2_IFU_bits_Next_PC;
  wire        _WBU_io_WBU_2_REG_inst_valid;
  wire [3:0]  _WBU_io_WBU_2_REG_GPR_waddr;
  wire [31:0] _WBU_io_WBU_2_REG_GPR_wdata;
  wire [1:0]  _WBU_io_WBU_2_REG_CSR_ctr;
  wire [11:0] _WBU_io_WBU_2_REG_CSR_waddra;
  wire [31:0] _WBU_io_WBU_2_REG_CSR_wdataa;
  wire        _ALU_io_IDU_2_EXU_ready;
  wire        _ALU_io_EXU_2_WBU_valid;
  wire [2:0]  _ALU_io_EXU_2_WBU_bits_Branch;
  wire [31:0] _ALU_io_EXU_2_WBU_bits_Jmp_Pc;
  wire        _ALU_io_EXU_2_WBU_bits_MemtoReg;
  wire [1:0]  _ALU_io_EXU_2_WBU_bits_csr_ctr;
  wire [11:0] _ALU_io_EXU_2_WBU_bits_CSR_waddr;
  wire [3:0]  _ALU_io_EXU_2_WBU_bits_GPR_waddr;
  wire [31:0] _ALU_io_EXU_2_WBU_bits_PC;
  wire [31:0] _ALU_io_EXU_2_WBU_bits_CSR_rdata;
  wire [31:0] _ALU_io_EXU_2_WBU_bits_Result;
  wire        _IDU_io_IFU_2_IDU_ready;
  wire        _IDU_io_IDU_2_EXU_valid;
  wire [2:0]  _IDU_io_IDU_2_EXU_bits_Branch;
  wire [2:0]  _IDU_io_IDU_2_EXU_bits_MemOp;
  wire [31:0] _IDU_io_IDU_2_EXU_bits_EXU_A;
  wire [31:0] _IDU_io_IDU_2_EXU_bits_EXU_B;
  wire [3:0]  _IDU_io_IDU_2_EXU_bits_EXUctr;
  wire [1:0]  _IDU_io_IDU_2_EXU_bits_csr_ctr;
  wire [31:0] _IDU_io_IDU_2_EXU_bits_Imm;
  wire [3:0]  _IDU_io_IDU_2_EXU_bits_GPR_waddr;
  wire [31:0] _IDU_io_IDU_2_EXU_bits_PC;
  wire [4:0]  _IDU_io_IDU_2_REG_GPR_Aaddr;
  wire [4:0]  _IDU_io_IDU_2_REG_GPR_Baddr;
  wire [11:0] _IDU_io_IDU_2_REG_CSR_raddr;
  wire        _lsram_auto_in_awready;
  wire        _lsram_auto_in_wready;
  wire        _lsram_auto_in_bvalid;
  wire [4:0]  _lsram_auto_in_bid;
  wire        _lsram_auto_in_arready;
  wire        _lsram_auto_in_rvalid;
  wire [4:0]  _lsram_auto_in_rid;
  wire [31:0] _lsram_auto_in_rdata;
  wire        _lsram_auto_in_rlast;
  wire        _lclint_auto_in_arready;
  wire        _lclint_auto_in_rvalid;
  wire [31:0] _lclint_auto_in_rdata;
  wire        _luart_auto_in_awready;
  wire        _luart_auto_in_wready;
  wire        _luart_auto_in_bvalid;
  wire [4:0]  _luart_auto_in_bid;
  wire        _axi4xbar_auto_anon_in_1_awready;
  wire        _axi4xbar_auto_anon_in_1_wready;
  wire        _axi4xbar_auto_anon_in_1_bvalid;
  wire        _axi4xbar_auto_anon_in_1_arready;
  wire        _axi4xbar_auto_anon_in_1_rvalid;
  wire [31:0] _axi4xbar_auto_anon_in_1_rdata;
  wire        _axi4xbar_auto_anon_in_0_arready;
  wire        _axi4xbar_auto_anon_in_0_rvalid;
  wire [31:0] _axi4xbar_auto_anon_in_0_rdata;
  wire        _axi4xbar_auto_anon_out_2_awvalid;
  wire [4:0]  _axi4xbar_auto_anon_out_2_awid;
  wire [31:0] _axi4xbar_auto_anon_out_2_awaddr;
  wire        _axi4xbar_auto_anon_out_2_wvalid;
  wire [31:0] _axi4xbar_auto_anon_out_2_wdata;
  wire [3:0]  _axi4xbar_auto_anon_out_2_wstrb;
  wire        _axi4xbar_auto_anon_out_2_bready;
  wire        _axi4xbar_auto_anon_out_2_arvalid;
  wire [4:0]  _axi4xbar_auto_anon_out_2_arid;
  wire [31:0] _axi4xbar_auto_anon_out_2_araddr;
  wire [7:0]  _axi4xbar_auto_anon_out_2_arlen;
  wire        _axi4xbar_auto_anon_out_2_rready;
  wire        _axi4xbar_auto_anon_out_1_arvalid;
  wire [31:0] _axi4xbar_auto_anon_out_1_araddr;
  wire        _axi4xbar_auto_anon_out_1_rready;
  wire        _axi4xbar_auto_anon_out_0_awvalid;
  wire [4:0]  _axi4xbar_auto_anon_out_0_awid;
  wire        _axi4xbar_auto_anon_out_0_wvalid;
  wire [31:0] _axi4xbar_auto_anon_out_0_wdata;
  wire        _axi4xbar_auto_anon_out_0_bready;
  wire        _LazyLSU_auto_master_out_awvalid;
  wire [31:0] _LazyLSU_auto_master_out_awaddr;
  wire        _LazyLSU_auto_master_out_wvalid;
  wire [31:0] _LazyLSU_auto_master_out_wdata;
  wire [3:0]  _LazyLSU_auto_master_out_wstrb;
  wire        _LazyLSU_auto_master_out_bready;
  wire        _LazyLSU_auto_master_out_arvalid;
  wire [31:0] _LazyLSU_auto_master_out_araddr;
  wire        _LazyLSU_auto_master_out_rready;
  wire        _LazyLSU_io_IDU_2_EXU_ready;
  wire        _LazyLSU_io_EXU_2_WBU_valid;
  wire [2:0]  _LazyLSU_io_EXU_2_WBU_bits_Branch;
  wire        _LazyLSU_io_EXU_2_WBU_bits_MemtoReg;
  wire [1:0]  _LazyLSU_io_EXU_2_WBU_bits_csr_ctr;
  wire [11:0] _LazyLSU_io_EXU_2_WBU_bits_CSR_waddr;
  wire [3:0]  _LazyLSU_io_EXU_2_WBU_bits_GPR_waddr;
  wire [31:0] _LazyLSU_io_EXU_2_WBU_bits_PC;
  wire [31:0] _LazyLSU_io_EXU_2_WBU_bits_CSR_rdata;
  wire [31:0] _LazyLSU_io_EXU_2_WBU_bits_Mem_rdata;
  wire        _LazyIFU_auto_master_out_arvalid;
  wire [31:0] _LazyIFU_auto_master_out_araddr;
  wire [7:0]  _LazyIFU_auto_master_out_arlen;
  wire        _LazyIFU_auto_master_out_rready;
  wire        _LazyIFU_io_IFU_2_IDU_valid;
  wire [31:0] _LazyIFU_io_IFU_2_IDU_bits_data;
  wire [31:0] _LazyIFU_io_IFU_2_IDU_bits_PC;
  wire        to_LSU =
    _IDU_io_IDU_2_EXU_bits_EXUctr == 4'hC | _IDU_io_IDU_2_EXU_bits_EXUctr == 4'hD;
  reg  [31:0] IDU_io_IFU_2_IDU_bits_rdata;
  reg  [31:0] IDU_io_IFU_2_IDU_bits_rPC;
  reg         IDU_io_IFU_2_IDU_valid_REG;
  wire        IDU_io_IDU_2_EXU_ready =
    ~_PipelineCtrl_io_IDUCtrl_stall
    & (to_LSU & _LazyLSU_io_IDU_2_EXU_ready | ~to_LSU & _ALU_io_IDU_2_EXU_ready);
  reg  [2:0]  LazyLSU_io_IDU_2_EXU_bits_rBranch;
  reg  [2:0]  LazyLSU_io_IDU_2_EXU_bits_rMemOp;
  reg  [31:0] LazyLSU_io_IDU_2_EXU_bits_rEXU_A;
  reg  [31:0] LazyLSU_io_IDU_2_EXU_bits_rEXU_B;
  reg  [3:0]  LazyLSU_io_IDU_2_EXU_bits_rEXUctr;
  reg  [1:0]  LazyLSU_io_IDU_2_EXU_bits_rcsr_ctr;
  reg  [31:0] LazyLSU_io_IDU_2_EXU_bits_rImm;
  reg  [3:0]  LazyLSU_io_IDU_2_EXU_bits_rGPR_waddr;
  reg  [31:0] LazyLSU_io_IDU_2_EXU_bits_rPC;
  reg         LazyLSU_io_IDU_2_EXU_valid_REG;
  reg  [2:0]  ALU_io_IDU_2_EXU_bits_rBranch;
  reg  [31:0] ALU_io_IDU_2_EXU_bits_rEXU_A;
  reg  [31:0] ALU_io_IDU_2_EXU_bits_rEXU_B;
  reg  [3:0]  ALU_io_IDU_2_EXU_bits_rEXUctr;
  reg  [1:0]  ALU_io_IDU_2_EXU_bits_rcsr_ctr;
  reg  [31:0] ALU_io_IDU_2_EXU_bits_rImm;
  reg  [3:0]  ALU_io_IDU_2_EXU_bits_rGPR_waddr;
  reg  [31:0] ALU_io_IDU_2_EXU_bits_rPC;
  reg         ALU_io_IDU_2_EXU_valid_REG;
  reg  [2:0]  WBU_io_EXU_2_WBU_bits_rBranch;
  reg  [31:0] WBU_io_EXU_2_WBU_bits_rJmp_Pc;
  reg         WBU_io_EXU_2_WBU_bits_rMemtoReg;
  reg  [1:0]  WBU_io_EXU_2_WBU_bits_rcsr_ctr;
  reg  [11:0] WBU_io_EXU_2_WBU_bits_rCSR_waddr;
  reg  [3:0]  WBU_io_EXU_2_WBU_bits_rGPR_waddr;
  reg  [31:0] WBU_io_EXU_2_WBU_bits_rPC;
  reg  [31:0] WBU_io_EXU_2_WBU_bits_rCSR_rdata;
  reg  [31:0] WBU_io_EXU_2_WBU_bits_rResult;
  reg  [31:0] WBU_io_EXU_2_WBU_bits_rMem_rdata;
  reg         WBU_io_EXU_2_WBU_valid_REG;
  wire        _IDU_io_IFU_2_IDU_valid_T =
    _IDU_io_IFU_2_IDU_ready & _LazyIFU_io_IFU_2_IDU_valid;
  wire        _ALU_io_IDU_2_EXU_valid_T =
    IDU_io_IDU_2_EXU_ready & _IDU_io_IDU_2_EXU_valid;
  always @(posedge clock) begin
    if (_IDU_io_IFU_2_IDU_valid_T) begin
      IDU_io_IFU_2_IDU_bits_rdata <= _LazyIFU_io_IFU_2_IDU_bits_data;
      IDU_io_IFU_2_IDU_bits_rPC <= _LazyIFU_io_IFU_2_IDU_bits_PC;
    end
    if (_ALU_io_IDU_2_EXU_valid_T & to_LSU) begin
      LazyLSU_io_IDU_2_EXU_bits_rBranch <= _IDU_io_IDU_2_EXU_bits_Branch;
      LazyLSU_io_IDU_2_EXU_bits_rMemOp <= _IDU_io_IDU_2_EXU_bits_MemOp;
      LazyLSU_io_IDU_2_EXU_bits_rEXU_A <= _IDU_io_IDU_2_EXU_bits_EXU_A;
      LazyLSU_io_IDU_2_EXU_bits_rEXU_B <= _IDU_io_IDU_2_EXU_bits_EXU_B;
      LazyLSU_io_IDU_2_EXU_bits_rEXUctr <= _IDU_io_IDU_2_EXU_bits_EXUctr;
      LazyLSU_io_IDU_2_EXU_bits_rcsr_ctr <= _IDU_io_IDU_2_EXU_bits_csr_ctr;
      LazyLSU_io_IDU_2_EXU_bits_rImm <= _IDU_io_IDU_2_EXU_bits_Imm;
      LazyLSU_io_IDU_2_EXU_bits_rGPR_waddr <= _IDU_io_IDU_2_EXU_bits_GPR_waddr;
      LazyLSU_io_IDU_2_EXU_bits_rPC <= _IDU_io_IDU_2_EXU_bits_PC;
    end
    if (_ALU_io_IDU_2_EXU_valid_T & ~to_LSU) begin
      ALU_io_IDU_2_EXU_bits_rBranch <= _IDU_io_IDU_2_EXU_bits_Branch;
      ALU_io_IDU_2_EXU_bits_rEXU_A <= _IDU_io_IDU_2_EXU_bits_EXU_A;
      ALU_io_IDU_2_EXU_bits_rEXU_B <= _IDU_io_IDU_2_EXU_bits_EXU_B;
      ALU_io_IDU_2_EXU_bits_rEXUctr <= _IDU_io_IDU_2_EXU_bits_EXUctr;
      ALU_io_IDU_2_EXU_bits_rcsr_ctr <= _IDU_io_IDU_2_EXU_bits_csr_ctr;
      ALU_io_IDU_2_EXU_bits_rImm <= _IDU_io_IDU_2_EXU_bits_Imm;
      ALU_io_IDU_2_EXU_bits_rGPR_waddr <= _IDU_io_IDU_2_EXU_bits_GPR_waddr;
      ALU_io_IDU_2_EXU_bits_rPC <= _IDU_io_IDU_2_EXU_bits_PC;
    end
    if (_arb_io_out_valid) begin
      WBU_io_EXU_2_WBU_bits_rBranch <= _arb_io_out_bits_Branch;
      WBU_io_EXU_2_WBU_bits_rJmp_Pc <= _arb_io_out_bits_Jmp_Pc;
      WBU_io_EXU_2_WBU_bits_rMemtoReg <= _arb_io_out_bits_MemtoReg;
      WBU_io_EXU_2_WBU_bits_rcsr_ctr <= _arb_io_out_bits_csr_ctr;
      WBU_io_EXU_2_WBU_bits_rCSR_waddr <= _arb_io_out_bits_CSR_waddr;
      WBU_io_EXU_2_WBU_bits_rGPR_waddr <= _arb_io_out_bits_GPR_waddr;
      WBU_io_EXU_2_WBU_bits_rPC <= _arb_io_out_bits_PC;
      WBU_io_EXU_2_WBU_bits_rCSR_rdata <= _arb_io_out_bits_CSR_rdata;
      WBU_io_EXU_2_WBU_bits_rResult <= _arb_io_out_bits_Result;
      WBU_io_EXU_2_WBU_bits_rMem_rdata <= _arb_io_out_bits_Mem_rdata;
    end
    if (reset) begin
      IDU_io_IFU_2_IDU_valid_REG <= 1'h0;
      LazyLSU_io_IDU_2_EXU_valid_REG <= 1'h0;
      ALU_io_IDU_2_EXU_valid_REG <= 1'h0;
      WBU_io_EXU_2_WBU_valid_REG <= 1'h0;
    end
    else begin
      IDU_io_IFU_2_IDU_valid_REG <=
        ~_PipelineCtrl_io_IFUCtrl_flush
        & (_IDU_io_IFU_2_IDU_valid_T | ~_ALU_io_IDU_2_EXU_valid_T
           & IDU_io_IFU_2_IDU_valid_REG);
      LazyLSU_io_IDU_2_EXU_valid_REG <=
        ~_PipelineCtrl_io_IDUCtrl_flush
        & (_ALU_io_IDU_2_EXU_valid_T & to_LSU | ~_LazyLSU_io_EXU_2_WBU_valid
           & LazyLSU_io_IDU_2_EXU_valid_REG);
      ALU_io_IDU_2_EXU_valid_REG <=
        ~_PipelineCtrl_io_IDUCtrl_flush
        & (_ALU_io_IDU_2_EXU_valid_T & ~to_LSU
           | ~(_arb_io_in_1_ready & _ALU_io_EXU_2_WBU_valid)
           & ALU_io_IDU_2_EXU_valid_REG);
      WBU_io_EXU_2_WBU_valid_REG <=
        ~_PipelineCtrl_io_EXUCtrl_flush
        & (_arb_io_out_valid | ~_WBU_io_WBU_2_IFU_valid & WBU_io_EXU_2_WBU_valid_REG);
    end
  end // always @(posedge)
  IFU LazyIFU (
    .clock                        (clock),
    .reset                        (reset),
    .auto_master_out_arready     (_axi4xbar_auto_anon_in_0_arready),
    .auto_master_out_arvalid     (_LazyIFU_auto_master_out_arvalid),
    .auto_master_out_araddr (_LazyIFU_auto_master_out_araddr),
    .auto_master_out_arlen  (_LazyIFU_auto_master_out_arlen),
    .auto_master_out_rready      (_LazyIFU_auto_master_out_rready),
    .auto_master_out_rvalid      (_axi4xbar_auto_anon_in_0_rvalid),
    .auto_master_out_rdata  (_axi4xbar_auto_anon_in_0_rdata),
    .io_WBU_2_IFU_Next_PC         (_WBU_io_WBU_2_IFU_bits_Next_PC),
    .io_IFU_2_IDU_ready           (_IDU_io_IFU_2_IDU_ready),
    .io_IFU_2_IDU_valid           (_LazyIFU_io_IFU_2_IDU_valid),
    .io_IFU_2_IDU_bits_data       (_LazyIFU_io_IFU_2_IDU_bits_data),
    .io_IFU_2_IDU_bits_PC         (_LazyIFU_io_IFU_2_IDU_bits_PC),
    .io_Pipeline_ctrl_flush       (_PipelineCtrl_io_IFUCtrl_flush)
  );
  LSU LazyLSU (
    .clock                        (clock),
    .reset                        (reset),
    .auto_master_out_awready     (_axi4xbar_auto_anon_in_1_awready),
    .auto_master_out_awvalid     (_LazyLSU_auto_master_out_awvalid),
    .auto_master_out_awaddr (_LazyLSU_auto_master_out_awaddr),
    .auto_master_out_wready      (_axi4xbar_auto_anon_in_1_wready),
    .auto_master_out_wvalid      (_LazyLSU_auto_master_out_wvalid),
    .auto_master_out_wdata  (_LazyLSU_auto_master_out_wdata),
    .auto_master_out_wstrb  (_LazyLSU_auto_master_out_wstrb),
    .auto_master_out_bready      (_LazyLSU_auto_master_out_bready),
    .auto_master_out_bvalid      (_axi4xbar_auto_anon_in_1_bvalid),
    .auto_master_out_arready     (_axi4xbar_auto_anon_in_1_arready),
    .auto_master_out_arvalid     (_LazyLSU_auto_master_out_arvalid),
    .auto_master_out_araddr (_LazyLSU_auto_master_out_araddr),
    .auto_master_out_rready      (_LazyLSU_auto_master_out_rready),
    .auto_master_out_rvalid      (_axi4xbar_auto_anon_in_1_rvalid),
    .auto_master_out_rdata  (_axi4xbar_auto_anon_in_1_rdata),
    .io_IDU_2_EXU_ready           (_LazyLSU_io_IDU_2_EXU_ready),
    .io_IDU_2_EXU_valid           (LazyLSU_io_IDU_2_EXU_valid_REG),
    .io_IDU_2_EXU_bits_Branch     (LazyLSU_io_IDU_2_EXU_bits_rBranch),
    .io_IDU_2_EXU_bits_MemOp      (LazyLSU_io_IDU_2_EXU_bits_rMemOp),
    .io_IDU_2_EXU_bits_EXU_A      (LazyLSU_io_IDU_2_EXU_bits_rEXU_A),
    .io_IDU_2_EXU_bits_EXU_B      (LazyLSU_io_IDU_2_EXU_bits_rEXU_B),
    .io_IDU_2_EXU_bits_EXUctr     (LazyLSU_io_IDU_2_EXU_bits_rEXUctr),
    .io_IDU_2_EXU_bits_csr_ctr    (LazyLSU_io_IDU_2_EXU_bits_rcsr_ctr),
    .io_IDU_2_EXU_bits_Imm        (LazyLSU_io_IDU_2_EXU_bits_rImm),
    .io_IDU_2_EXU_bits_GPR_waddr  (LazyLSU_io_IDU_2_EXU_bits_rGPR_waddr),
    .io_IDU_2_EXU_bits_PC         (LazyLSU_io_IDU_2_EXU_bits_rPC),
    .io_EXU_2_WBU_valid           (_LazyLSU_io_EXU_2_WBU_valid),
    .io_EXU_2_WBU_bits_Branch     (_LazyLSU_io_EXU_2_WBU_bits_Branch),
    .io_EXU_2_WBU_bits_MemtoReg   (_LazyLSU_io_EXU_2_WBU_bits_MemtoReg),
    .io_EXU_2_WBU_bits_csr_ctr    (_LazyLSU_io_EXU_2_WBU_bits_csr_ctr),
    .io_EXU_2_WBU_bits_CSR_waddr  (_LazyLSU_io_EXU_2_WBU_bits_CSR_waddr),
    .io_EXU_2_WBU_bits_GPR_waddr  (_LazyLSU_io_EXU_2_WBU_bits_GPR_waddr),
    .io_EXU_2_WBU_bits_PC         (_LazyLSU_io_EXU_2_WBU_bits_PC),
    .io_EXU_2_WBU_bits_CSR_rdata  (_LazyLSU_io_EXU_2_WBU_bits_CSR_rdata),
    .io_EXU_2_WBU_bits_Mem_rdata  (_LazyLSU_io_EXU_2_WBU_bits_Mem_rdata),
    .io_flush                     (_PipelineCtrl_io_EXUCtrl_flush)
  );
  AXI4Xbar axi4xbar (
    .clock                        (clock),
    .reset                        (reset),
    .auto_anon_in_1_awready      (_axi4xbar_auto_anon_in_1_awready),
    .auto_anon_in_1_awvalid      (_LazyLSU_auto_master_out_awvalid),
    .auto_anon_in_1_awaddr  (_LazyLSU_auto_master_out_awaddr),
    .auto_anon_in_1_wready       (_axi4xbar_auto_anon_in_1_wready),
    .auto_anon_in_1_wvalid       (_LazyLSU_auto_master_out_wvalid),
    .auto_anon_in_1_wdata   (_LazyLSU_auto_master_out_wdata),
    .auto_anon_in_1_wstrb   (_LazyLSU_auto_master_out_wstrb),
    .auto_anon_in_1_bready       (_LazyLSU_auto_master_out_bready),
    .auto_anon_in_1_bvalid       (_axi4xbar_auto_anon_in_1_bvalid),
    .auto_anon_in_1_arready      (_axi4xbar_auto_anon_in_1_arready),
    .auto_anon_in_1_arvalid      (_LazyLSU_auto_master_out_arvalid),
    .auto_anon_in_1_araddr  (_LazyLSU_auto_master_out_araddr),
    .auto_anon_in_1_rready       (_LazyLSU_auto_master_out_rready),
    .auto_anon_in_1_rvalid       (_axi4xbar_auto_anon_in_1_rvalid),
    .auto_anon_in_1_rdata   (_axi4xbar_auto_anon_in_1_rdata),
    .auto_anon_in_0_arready      (_axi4xbar_auto_anon_in_0_arready),
    .auto_anon_in_0_arvalid      (_LazyIFU_auto_master_out_arvalid),
    .auto_anon_in_0_araddr  (_LazyIFU_auto_master_out_araddr),
    .auto_anon_in_0_arlen   (_LazyIFU_auto_master_out_arlen),
    .auto_anon_in_0_rready       (_LazyIFU_auto_master_out_rready),
    .auto_anon_in_0_rvalid       (_axi4xbar_auto_anon_in_0_rvalid),
    .auto_anon_in_0_rdata   (_axi4xbar_auto_anon_in_0_rdata),
    .auto_anon_out_2_awready     (_lsram_auto_in_awready),
    .auto_anon_out_2_awvalid     (_axi4xbar_auto_anon_out_2_awvalid),
    .auto_anon_out_2_awid   (_axi4xbar_auto_anon_out_2_awid),
    .auto_anon_out_2_awaddr (_axi4xbar_auto_anon_out_2_awaddr),
    .auto_anon_out_2_wready      (_lsram_auto_in_wready),
    .auto_anon_out_2_wvalid      (_axi4xbar_auto_anon_out_2_wvalid),
    .auto_anon_out_2_wdata  (_axi4xbar_auto_anon_out_2_wdata),
    .auto_anon_out_2_wstrb  (_axi4xbar_auto_anon_out_2_wstrb),
    .auto_anon_out_2_bready      (_axi4xbar_auto_anon_out_2_bready),
    .auto_anon_out_2_bvalid      (_lsram_auto_in_bvalid),
    .auto_anon_out_2_bid    (_lsram_auto_in_bid),
    .auto_anon_out_2_arready     (_lsram_auto_in_arready),
    .auto_anon_out_2_arvalid     (_axi4xbar_auto_anon_out_2_arvalid),
    .auto_anon_out_2_arid   (_axi4xbar_auto_anon_out_2_arid),
    .auto_anon_out_2_araddr (_axi4xbar_auto_anon_out_2_araddr),
    .auto_anon_out_2_arlen  (_axi4xbar_auto_anon_out_2_arlen),
    .auto_anon_out_2_rready      (_axi4xbar_auto_anon_out_2_rready),
    .auto_anon_out_2_rvalid      (_lsram_auto_in_rvalid),
    .auto_anon_out_2_rid    (_lsram_auto_in_rid),
    .auto_anon_out_2_rdata  (_lsram_auto_in_rdata),
    .auto_anon_out_2_rlast  (_lsram_auto_in_rlast),
    .auto_anon_out_1_arready     (_lclint_auto_in_arready),
    .auto_anon_out_1_arvalid     (_axi4xbar_auto_anon_out_1_arvalid),
    .auto_anon_out_1_araddr (_axi4xbar_auto_anon_out_1_araddr),
    .auto_anon_out_1_rready      (_axi4xbar_auto_anon_out_1_rready),
    .auto_anon_out_1_rvalid      (_lclint_auto_in_rvalid),
    .auto_anon_out_1_rdata  (_lclint_auto_in_rdata),
    .auto_anon_out_0_awready     (_luart_auto_in_awready),
    .auto_anon_out_0_awvalid     (_axi4xbar_auto_anon_out_0_awvalid),
    .auto_anon_out_0_awid   (_axi4xbar_auto_anon_out_0_awid),
    .auto_anon_out_0_wready      (_luart_auto_in_wready),
    .auto_anon_out_0_wvalid      (_axi4xbar_auto_anon_out_0_wvalid),
    .auto_anon_out_0_wdata  (_axi4xbar_auto_anon_out_0_wdata),
    .auto_anon_out_0_bready      (_axi4xbar_auto_anon_out_0_bready),
    .auto_anon_out_0_bvalid      (_luart_auto_in_bvalid),
    .auto_anon_out_0_bid    (_luart_auto_in_bid)
  );
  UART luart (
    .clock               (clock),
    .reset               (reset),
    .auto_in_awready    (_luart_auto_in_awready),
    .auto_in_awvalid    (_axi4xbar_auto_anon_out_0_awvalid),
    .auto_in_awid  (_axi4xbar_auto_anon_out_0_awid),
    .auto_in_wready     (_luart_auto_in_wready),
    .auto_in_wvalid     (_axi4xbar_auto_anon_out_0_wvalid),
    .auto_in_wdata (_axi4xbar_auto_anon_out_0_wdata),
    .auto_in_bready     (_axi4xbar_auto_anon_out_0_bready),
    .auto_in_bvalid     (_luart_auto_in_bvalid),
    .auto_in_bid   (_luart_auto_in_bid)
  );
  CLINT lclint (
    .clock                (clock),
    .reset                (reset),
    .auto_in_arready     (_lclint_auto_in_arready),
    .auto_in_arvalid     (_axi4xbar_auto_anon_out_1_arvalid),
    .auto_in_araddr (_axi4xbar_auto_anon_out_1_araddr),
    .auto_in_rready      (_axi4xbar_auto_anon_out_1_rready),
    .auto_in_rvalid      (_lclint_auto_in_rvalid),
    .auto_in_rdata  (_lclint_auto_in_rdata)
  );
  SRAM lsram (
    .clock                (clock),
    .reset                (reset),
    .auto_in_awready     (_lsram_auto_in_awready),
    .auto_in_awvalid     (_axi4xbar_auto_anon_out_2_awvalid),
    .auto_in_awid   (_axi4xbar_auto_anon_out_2_awid),
    .auto_in_awaddr (_axi4xbar_auto_anon_out_2_awaddr),
    .auto_in_wready      (_lsram_auto_in_wready),
    .auto_in_wvalid      (_axi4xbar_auto_anon_out_2_wvalid),
    .auto_in_wdata  (_axi4xbar_auto_anon_out_2_wdata),
    .auto_in_wstrb  (_axi4xbar_auto_anon_out_2_wstrb),
    .auto_in_bready      (_axi4xbar_auto_anon_out_2_bready),
    .auto_in_bvalid      (_lsram_auto_in_bvalid),
    .auto_in_bid    (_lsram_auto_in_bid),
    .auto_in_arready     (_lsram_auto_in_arready),
    .auto_in_arvalid     (_axi4xbar_auto_anon_out_2_arvalid),
    .auto_in_arid   (_axi4xbar_auto_anon_out_2_arid),
    .auto_in_araddr (_axi4xbar_auto_anon_out_2_araddr),
    .auto_in_arlen  (_axi4xbar_auto_anon_out_2_arlen),
    .auto_in_rready      (_axi4xbar_auto_anon_out_2_rready),
    .auto_in_rvalid      (_lsram_auto_in_rvalid),
    .auto_in_rid    (_lsram_auto_in_rid),
    .auto_in_rdata  (_lsram_auto_in_rdata),
    .auto_in_rlast  (_lsram_auto_in_rlast)
  );
  IDU IDU (
    .clock                       (clock),
    .reset                       (reset),
    .io_IFU_2_IDU_ready          (_IDU_io_IFU_2_IDU_ready),
    .io_IFU_2_IDU_valid          (IDU_io_IFU_2_IDU_valid_REG),
    .io_IFU_2_IDU_bits_data      (IDU_io_IFU_2_IDU_bits_rdata),
    .io_IFU_2_IDU_bits_PC        (IDU_io_IFU_2_IDU_bits_rPC),
    .io_REG_2_IDU_CSR_rdata      (_REG_io_REG_2_IDU_CSR_rdata),
    .io_REG_2_IDU_GPR_Adata      (_REG_io_REG_2_IDU_GPR_Adata),
    .io_REG_2_IDU_GPR_Bdata      (_REG_io_REG_2_IDU_GPR_Bdata),
    .io_IDU_2_EXU_ready          (IDU_io_IDU_2_EXU_ready),
    .io_IDU_2_EXU_valid          (_IDU_io_IDU_2_EXU_valid),
    .io_IDU_2_EXU_bits_Branch    (_IDU_io_IDU_2_EXU_bits_Branch),
    .io_IDU_2_EXU_bits_MemOp     (_IDU_io_IDU_2_EXU_bits_MemOp),
    .io_IDU_2_EXU_bits_EXU_A     (_IDU_io_IDU_2_EXU_bits_EXU_A),
    .io_IDU_2_EXU_bits_EXU_B     (_IDU_io_IDU_2_EXU_bits_EXU_B),
    .io_IDU_2_EXU_bits_EXUctr    (_IDU_io_IDU_2_EXU_bits_EXUctr),
    .io_IDU_2_EXU_bits_csr_ctr   (_IDU_io_IDU_2_EXU_bits_csr_ctr),
    .io_IDU_2_EXU_bits_Imm       (_IDU_io_IDU_2_EXU_bits_Imm),
    .io_IDU_2_EXU_bits_GPR_waddr (_IDU_io_IDU_2_EXU_bits_GPR_waddr),
    .io_IDU_2_EXU_bits_PC        (_IDU_io_IDU_2_EXU_bits_PC),
    .io_IDU_2_REG_GPR_Aaddr      (_IDU_io_IDU_2_REG_GPR_Aaddr),
    .io_IDU_2_REG_GPR_Baddr      (_IDU_io_IDU_2_REG_GPR_Baddr),
    .io_IDU_2_REG_CSR_raddr      (_IDU_io_IDU_2_REG_CSR_raddr)
  );
  ALU ALU (
    .clock                       (clock),
    .reset                       (reset),
    .io_IDU_2_EXU_ready          (_ALU_io_IDU_2_EXU_ready),
    .io_IDU_2_EXU_valid          (ALU_io_IDU_2_EXU_valid_REG),
    .io_IDU_2_EXU_bits_Branch    (ALU_io_IDU_2_EXU_bits_rBranch),
    .io_IDU_2_EXU_bits_EXU_A     (ALU_io_IDU_2_EXU_bits_rEXU_A),
    .io_IDU_2_EXU_bits_EXU_B     (ALU_io_IDU_2_EXU_bits_rEXU_B),
    .io_IDU_2_EXU_bits_EXUctr    (ALU_io_IDU_2_EXU_bits_rEXUctr),
    .io_IDU_2_EXU_bits_csr_ctr   (ALU_io_IDU_2_EXU_bits_rcsr_ctr),
    .io_IDU_2_EXU_bits_Imm       (ALU_io_IDU_2_EXU_bits_rImm),
    .io_IDU_2_EXU_bits_GPR_waddr (ALU_io_IDU_2_EXU_bits_rGPR_waddr),
    .io_IDU_2_EXU_bits_PC        (ALU_io_IDU_2_EXU_bits_rPC),
    .io_EXU_2_WBU_ready          (_arb_io_in_1_ready),
    .io_EXU_2_WBU_valid          (_ALU_io_EXU_2_WBU_valid),
    .io_EXU_2_WBU_bits_Branch    (_ALU_io_EXU_2_WBU_bits_Branch),
    .io_EXU_2_WBU_bits_Jmp_Pc    (_ALU_io_EXU_2_WBU_bits_Jmp_Pc),
    .io_EXU_2_WBU_bits_MemtoReg  (_ALU_io_EXU_2_WBU_bits_MemtoReg),
    .io_EXU_2_WBU_bits_csr_ctr   (_ALU_io_EXU_2_WBU_bits_csr_ctr),
    .io_EXU_2_WBU_bits_CSR_waddr (_ALU_io_EXU_2_WBU_bits_CSR_waddr),
    .io_EXU_2_WBU_bits_GPR_waddr (_ALU_io_EXU_2_WBU_bits_GPR_waddr),
    .io_EXU_2_WBU_bits_PC        (_ALU_io_EXU_2_WBU_bits_PC),
    .io_EXU_2_WBU_bits_CSR_rdata (_ALU_io_EXU_2_WBU_bits_CSR_rdata),
    .io_EXU_2_WBU_bits_Result    (_ALU_io_EXU_2_WBU_bits_Result)
  );
  WBU WBU (
    .clock                       (clock),
    .reset                       (reset),
    .io_EXU_2_WBU_valid          (WBU_io_EXU_2_WBU_valid_REG),
    .io_EXU_2_WBU_bits_Branch    (WBU_io_EXU_2_WBU_bits_rBranch),
    .io_EXU_2_WBU_bits_Jmp_Pc    (WBU_io_EXU_2_WBU_bits_rJmp_Pc),
    .io_EXU_2_WBU_bits_MemtoReg  (WBU_io_EXU_2_WBU_bits_rMemtoReg),
    .io_EXU_2_WBU_bits_csr_ctr   (WBU_io_EXU_2_WBU_bits_rcsr_ctr),
    .io_EXU_2_WBU_bits_CSR_waddr (WBU_io_EXU_2_WBU_bits_rCSR_waddr),
    .io_EXU_2_WBU_bits_GPR_waddr (WBU_io_EXU_2_WBU_bits_rGPR_waddr),
    .io_EXU_2_WBU_bits_PC        (WBU_io_EXU_2_WBU_bits_rPC),
    .io_EXU_2_WBU_bits_CSR_rdata (WBU_io_EXU_2_WBU_bits_rCSR_rdata),
    .io_EXU_2_WBU_bits_Result    (WBU_io_EXU_2_WBU_bits_rResult),
    .io_EXU_2_WBU_bits_Mem_rdata (WBU_io_EXU_2_WBU_bits_rMem_rdata),
    .io_WBU_2_IFU_valid          (_WBU_io_WBU_2_IFU_valid),
    .io_WBU_2_IFU_bits_Next_PC   (_WBU_io_WBU_2_IFU_bits_Next_PC),
    .io_WBU_2_REG_inst_valid     (_WBU_io_WBU_2_REG_inst_valid),
    .io_WBU_2_REG_GPR_waddr      (_WBU_io_WBU_2_REG_GPR_waddr),
    .io_WBU_2_REG_GPR_wdata      (_WBU_io_WBU_2_REG_GPR_wdata),
    .io_WBU_2_REG_CSR_ctr        (_WBU_io_WBU_2_REG_CSR_ctr),
    .io_WBU_2_REG_CSR_waddra     (_WBU_io_WBU_2_REG_CSR_waddra),
    .io_WBU_2_REG_CSR_wdataa     (_WBU_io_WBU_2_REG_CSR_wdataa)
  );
  REG REG (
    .clock                   (clock),
    .reset                   (reset),
    .io_REG_2_IDU_CSR_rdata  (_REG_io_REG_2_IDU_CSR_rdata),
    .io_REG_2_IDU_GPR_Adata  (_REG_io_REG_2_IDU_GPR_Adata),
    .io_REG_2_IDU_GPR_Bdata  (_REG_io_REG_2_IDU_GPR_Bdata),
    .io_IDU_2_REG_GPR_Aaddr  (_IDU_io_IDU_2_REG_GPR_Aaddr),
    .io_IDU_2_REG_GPR_Baddr  (_IDU_io_IDU_2_REG_GPR_Baddr),
    .io_IDU_2_REG_CSR_raddr  (_IDU_io_IDU_2_REG_CSR_raddr),
    .io_WBU_2_REG_inst_valid (_WBU_io_WBU_2_REG_inst_valid),
    .io_WBU_2_REG_GPR_waddr  (_WBU_io_WBU_2_REG_GPR_waddr),
    .io_WBU_2_REG_GPR_wdata  (_WBU_io_WBU_2_REG_GPR_wdata),
    .io_WBU_2_REG_CSR_ctr    (_WBU_io_WBU_2_REG_CSR_ctr),
    .io_WBU_2_REG_CSR_waddra (_WBU_io_WBU_2_REG_CSR_waddra),
    .io_WBU_2_REG_CSR_wdataa (_WBU_io_WBU_2_REG_CSR_wdataa)
  );
  PipelineCtrl PipelineCtrl (
    .io_GPR_read_valid          (_IDU_io_IDU_2_EXU_valid),
    .io_GPR_read_bits_GPR_Aaddr (_IDU_io_IDU_2_REG_GPR_Aaddr),
    .io_GPR_read_bits_GPR_Baddr (_IDU_io_IDU_2_REG_GPR_Baddr),
    .io_IFU_out_bits_PC         (_LazyIFU_io_IFU_2_IDU_bits_PC),
    .io_IDU_in_valid            (IDU_io_IFU_2_IDU_valid_REG),
    .io_IDU_in_bits_PC          (IDU_io_IFU_2_IDU_bits_rPC),
    .io_ALU_in_valid            (ALU_io_IDU_2_EXU_valid_REG),
    .io_ALU_in_bits_GPR_waddr   (ALU_io_IDU_2_EXU_bits_rGPR_waddr),
    .io_ALU_in_bits_PC          (ALU_io_IDU_2_EXU_bits_rPC),
    .io_LSU_in_valid            (LazyLSU_io_IDU_2_EXU_valid_REG),
    .io_LSU_in_bits_PC          (LazyLSU_io_IDU_2_EXU_bits_rPC),
    .io_WBU_in_valid            (WBU_io_EXU_2_WBU_valid_REG),
    .io_WBU_in_bits_GPR_waddr   (WBU_io_EXU_2_WBU_bits_rGPR_waddr),
    .io_Branch_msg_valid        (_WBU_io_WBU_2_IFU_valid),
    .io_Branch_msg_bits_Next_PC (_WBU_io_WBU_2_IFU_bits_Next_PC),
    .io_IFUCtrl_flush           (_PipelineCtrl_io_IFUCtrl_flush),
    .io_IDUCtrl_stall           (_PipelineCtrl_io_IDUCtrl_stall),
    .io_IDUCtrl_flush           (_PipelineCtrl_io_IDUCtrl_flush),
    .io_EXUCtrl_flush           (_PipelineCtrl_io_EXUCtrl_flush)
  );
  Arbiter2_BUS_EXU_2_WBU arb (
    .io_in_0_valid          (_LazyLSU_io_EXU_2_WBU_valid),
    .io_in_0_bits_Branch    (_LazyLSU_io_EXU_2_WBU_bits_Branch),
    .io_in_0_bits_MemtoReg  (_LazyLSU_io_EXU_2_WBU_bits_MemtoReg),
    .io_in_0_bits_csr_ctr   (_LazyLSU_io_EXU_2_WBU_bits_csr_ctr),
    .io_in_0_bits_CSR_waddr (_LazyLSU_io_EXU_2_WBU_bits_CSR_waddr),
    .io_in_0_bits_GPR_waddr (_LazyLSU_io_EXU_2_WBU_bits_GPR_waddr),
    .io_in_0_bits_PC        (_LazyLSU_io_EXU_2_WBU_bits_PC),
    .io_in_0_bits_CSR_rdata (_LazyLSU_io_EXU_2_WBU_bits_CSR_rdata),
    .io_in_0_bits_Mem_rdata (_LazyLSU_io_EXU_2_WBU_bits_Mem_rdata),
    .io_in_1_ready          (_arb_io_in_1_ready),
    .io_in_1_valid          (_ALU_io_EXU_2_WBU_valid),
    .io_in_1_bits_Branch    (_ALU_io_EXU_2_WBU_bits_Branch),
    .io_in_1_bits_Jmp_Pc    (_ALU_io_EXU_2_WBU_bits_Jmp_Pc),
    .io_in_1_bits_MemtoReg  (_ALU_io_EXU_2_WBU_bits_MemtoReg),
    .io_in_1_bits_csr_ctr   (_ALU_io_EXU_2_WBU_bits_csr_ctr),
    .io_in_1_bits_CSR_waddr (_ALU_io_EXU_2_WBU_bits_CSR_waddr),
    .io_in_1_bits_GPR_waddr (_ALU_io_EXU_2_WBU_bits_GPR_waddr),
    .io_in_1_bits_PC        (_ALU_io_EXU_2_WBU_bits_PC),
    .io_in_1_bits_CSR_rdata (_ALU_io_EXU_2_WBU_bits_CSR_rdata),
    .io_in_1_bits_Result    (_ALU_io_EXU_2_WBU_bits_Result),
    .io_out_valid           (_arb_io_out_valid),
    .io_out_bits_Branch     (_arb_io_out_bits_Branch),
    .io_out_bits_Jmp_Pc     (_arb_io_out_bits_Jmp_Pc),
    .io_out_bits_MemtoReg   (_arb_io_out_bits_MemtoReg),
    .io_out_bits_csr_ctr    (_arb_io_out_bits_csr_ctr),
    .io_out_bits_CSR_waddr  (_arb_io_out_bits_CSR_waddr),
    .io_out_bits_GPR_waddr  (_arb_io_out_bits_GPR_waddr),
    .io_out_bits_PC         (_arb_io_out_bits_PC),
    .io_out_bits_CSR_rdata  (_arb_io_out_bits_CSR_rdata),
    .io_out_bits_Result     (_arb_io_out_bits_Result),
    .io_out_bits_Mem_rdata  (_arb_io_out_bits_Mem_rdata)
  );
endmodule

module top(
  input clock,
        reset
);

  npc dut (
    .clock (clock),
    .reset (reset)
  );
endmodule


// ----- 8< ----- FILE "./Icache_state_catch.v" ----- 8< -----


module Icache_state_catch(
    input valid,

    input [31:0] write_index,
    input [31:0] write_way,
    input [31:0] write_tag,
    input [127:0] write_data,

    input flush
);

   import "DPI-C" function void Icache_state_catch(input bit [31:0] write_index, input bit [31:0] write_way, input bit [31:0] write_tag, input bit [127:0] write_data);
   always @(posedge valid) begin
       Icache_state_catch(write_index, write_way, write_tag, write_data);
   end

   import "DPI-C" function void Icache_flush();
   always @(posedge flush) begin
       Icache_flush();
   end

endmodule
    

// ----- 8< ----- FILE "./IFU_catch.v" ----- 8< -----


module IFU_catch(
    input clock,
    input valid,
    input [31:0] pc,
    input [31:0] inst
);

   import "DPI-C" function void IFU_catch(input bit [31:0] pc, input bit [31:0] inst);
   always @(posedge clock) begin
       if(valid) begin
           IFU_catch(pc, inst);
       end
   end

endmodule
    

// ----- 8< ----- FILE "./Icache_catch.v" ----- 8< -----


module Icache_catch(
   input Icache,
   input map_hit,
   input cache_hit
);

   import "DPI-C" function void Icache_catch(input bit map_hit, input bit cache_hit);
   always @(posedge Icache) begin
       Icache_catch(map_hit, cache_hit);
   end

endmodule
    

// ----- 8< ----- FILE "./Icache_MAT_catch.v" ----- 8< -----


module Icache_MAT_catch(
    input valid,
    input [31:0] count
);

   import "DPI-C" function void Icache_MAT_catch(input bit [31:0] count);
   always @(posedge valid) begin
       Icache_MAT_catch(count);
   end

endmodule
    

// ----- 8< ----- FILE "./LSU_catch.v" ----- 8< -----

module LSU_catch(
   input clock,
   input valid,
   input diff_skip
);
  import "DPI-C" function void LSU_catch(input bit diff_skip);
  always @(posedge clock) begin
     if(valid) begin
         LSU_catch(diff_skip);
     end
  end
endmodule
    

// ----- 8< ----- FILE "./UART_bridge.v" ----- 8< -----

module UART_bridge(
  input clock,
  input valid,
  input [7:0] data
);
  import "DPI-C" function void Uart_putc(input bit [7:0] c);
  
  always @(posedge clock) begin
    if(valid) begin
      Uart_putc(data);
    end
  end

endmodule
    

// ----- 8< ----- FILE "./SRAM_BRIDGE.v" ----- 8< -----

module sram_bridge(
    input  clock,
    input  read,
    input  [31:0] r_addr,
    output [31:0] r_data,
    input  write,
    input  [31:0] w_addr,
    input  [31:0] w_data,
    input  [3:0]  w_strb
);

import "DPI-C" function void sram_read (input bit [31:0] addr, output bit [31:0] data);
import "DPI-C" function void sram_write (input bit [31:0] addr, input bit [31:0] data, input bit [3:0] mask);

    always @(posedge clock) begin
        if (read) begin
            sram_read(r_addr, r_data);
        end
        if (write) begin
            sram_write(w_addr, w_data, w_strb);
        end
    end

endmodule
    

// ----- 8< ----- FILE "./IDU_catch.v" ----- 8< -----

module IDU_catch(
   input clock,
   input valid,
   input [1:0] Inst_Type
);
import "DPI-C" function void IDU_catch(input bit [1:0] Inst_Type);

always @(posedge clock) begin
   if (valid) begin
       IDU_catch(Inst_Type);
   end
end

endmodule
    

// ----- 8< ----- FILE "./ALU_catch.v" ----- 8< -----

module ALU_catch(
    input clock,
    input valid
);
  import "DPI-C" function void ALU_catch();
  always @(posedge clock) begin
     if(valid) begin
       ALU_catch();
     end
  end
endmodule
  

// ----- 8< ----- FILE "./WBU_catch.v" ----- 8< -----

module WBU_catch(
    input clock,
    input valid,

    input [31:0] next_pc,

    input [31:0] gpr_waddr,
    input [31:0] gpr_wdata,

    input [31:0] csr_wena,
    input [31:0] csr_waddra,
    input [31:0] csr_wdataa,
    input [31:0] csr_wenb,
    input [31:0] csr_waddrb,
    input [31:0] csr_wdatab
);

   import "DPI-C" function void WBU_catch(input bit [31:0] next_pc, input bit [31:0] gpr_waddr, input bit [31:0] gpr_wdata, input bit [31:0] csr_wena, input bit [31:0] csr_waddra, input bit [31:0] csr_wdataa, input bit [31:0] csr_wenb, input bit [31:0] csr_waddrb, input bit [31:0] csr_wdatab);
   always @(posedge clock) begin
       if(valid) begin
           WBU_catch(next_pc, gpr_waddr, gpr_wdata, csr_wena, csr_waddra, csr_wdataa, csr_wenb, csr_waddrb, csr_wdatab);
       end
   end

endmodule
    

// ----- 8< ----- FILE "./Pipeline_catch.v" ----- 8< -----

module Pipeline_catch(
  input valid,
  input pipeline_flush
);
import "DPI-C" function void Pipeline_catch();
always @(posedge valid) begin
    if(pipeline_flush) begin
        Pipeline_catch();
    end
end
endmodule
  

